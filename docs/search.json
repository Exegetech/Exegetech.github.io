[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome! Livereload\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Table Of Contents",
    "section": "",
    "text": "This is a post with my final project for Data Science bootcamp.\nTest 1 2 3"
  },
  {
    "objectID": "posts/post-with-code/index.html#data-preparation-import-libraries-data-cleaning-data-wrangling",
    "href": "posts/post-with-code/index.html#data-preparation-import-libraries-data-cleaning-data-wrangling",
    "title": "Table Of Contents",
    "section": "Data Preparation (Import libraries, data cleaning & data wrangling)",
    "text": "Data Preparation (Import libraries, data cleaning & data wrangling)\n\n\n\n\n\n\n\n\n\n\ncustomerID\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\n...\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\nHobby\n\n\n\n\n0\n7590-VHVEG\nFemale\n0\nYes\nNo\n135\nNo\nNo phone service\nDSL\nNo\n...\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n29.85\n29.85\nNo\nSwimming\n\n\n1\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\n...\nNo\nNo\nNo\nOne year\nNo\nMailed check\n56.95\n1889.5\nNo\nRunning\n\n\n2\n3668-QPYBK\nMale\n0\nNo\nNo\n140\nYes\nNo\nDSL\nYes\n...\nNo\nNo\nNo\nMonth-to-month\nYes\nMailed check\n53.85\n7560\nYes\nHiking\n\n\n3\n7795-CFOCW\nMale\n0\nNo\nNo\n136\nNo\nNo phone service\nDSL\nYes\n...\nYes\nNo\nNo\nOne year\nNo\nBank transfer (automatic)\n42.45\n1840.75\nNo\nSwimming\n\n\n4\n9237-HQITU\nFemale\n0\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\n...\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n70.70\n151.65\nYes\nRunning\n\n\n\n\n5 rows × 22 columns\n\n\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 7043 entries, 0 to 7042\nData columns (total 22 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   customerID        7043 non-null   object \n 1   gender            7043 non-null   object \n 2   SeniorCitizen     7043 non-null   int64  \n 3   Partner           7043 non-null   object \n 4   Dependents        7043 non-null   object \n 5   tenure            7043 non-null   int64  \n 6   PhoneService      7043 non-null   object \n 7   MultipleLines     7043 non-null   object \n 8   InternetService   7043 non-null   object \n 9   OnlineSecurity    7043 non-null   object \n 10  OnlineBackup      7043 non-null   object \n 11  DeviceProtection  6627 non-null   object \n 12  TechSupport       7043 non-null   object \n 13  StreamingTV       7043 non-null   object \n 14  StreamingMovies   7043 non-null   object \n 15  Contract          6798 non-null   object \n 16  PaperlessBilling  7043 non-null   object \n 17  PaymentMethod     7043 non-null   object \n 18  MonthlyCharges    7043 non-null   float64\n 19  TotalCharges      4859 non-null   object \n 20  Churn             7043 non-null   object \n 21  Hobby             4201 non-null   object \ndtypes: float64(1), int64(2), object(19)\nmemory usage: 1.2+ MB\n&lt;class 'NoneType'&gt;\n\n\n\n\nMissing value of column DeviceProtection (%) : 5.91\nMissing value of column Contract (%) : 3.48\nMissing value of column TotalCharges (%) : 31.01\nMissing value of column Hobby (%) : 40.35\n\n\n\nAlasan melakukan imputation: 1.Missing value sedikit. 2.Kolom tidak memiliki relasi atau hubungan dikolom apapun sehingga multivariate imputasi tidak dimungkinkan. 3.Menggunakan proporsi nilai lebih tepat dari pada sekedar menggunakan nilai ‘mode’.\n\n\nAlasan melakukan delete kolom: 1.Missing value terlalu banyak. 2.Secara konteks, kolom tersebut tidak terlalu berguna dalam memberikan informasi. 3.Tidak memiliki justifikasi yang kuat (tidak bisa diimpute secara multivariate).\n\n\nAlasan melakukan imputation: 1.Walaupun missing value banyak namun imputasi tetap bisa dilakukan karena memiliki justifikasi yang kuat yaitu. 2.Kolom TotalCharges nilainya kurang lebih merupakan dari nilai tenure * MonthlyCharges. 3.Menggunakan proporsi nilai lebih tepat dari pada sekedar menggunakan nilai ‘mode’.\n\n\n\nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \n\n\n\n\n\n\n\n\n\n\n\ncustomerID\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\n...\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\n\n\n\n\n488\n4472-LVYGI\nFemale\n0\nYes\nYes\n0\nNo\nNo phone service\nDSL\nYes\n...\nYes\nYes\nYes\nNo\nMonth-to-month\nYes\nBank transfer (automatic)\n52.55\n\nNo\n\n\n753\n3115-CZMZD\nMale\n0\nNo\nYes\n0\nYes\nNo\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n20.25\n\nNo\n\n\n936\n5709-LVOEQ\nFemale\n0\nYes\nYes\n0\nYes\nNo\nDSL\nYes\n...\nNo\nNo\nYes\nYes\nTwo year\nNo\nMailed check\n80.85\n\nNo\n\n\n1082\n4367-NUYAO\nMale\n0\nYes\nYes\n0\nYes\nYes\nNo\nNo internet service\n...\nYes\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n25.75\n\nNo\n\n\n1334\n1768-ZAIFU\nFemale\n1\nNo\nNo\n0\nNo\nNo phone service\nDSL\nNo\n...\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n25.20\n\nYes\n\n\n1340\n1371-DWPAZ\nFemale\n0\nYes\nYes\n0\nNo\nNo phone service\nDSL\nYes\n...\nYes\nYes\nYes\nNo\nTwo year\nNo\nCredit card (automatic)\n56.05\n\nNo\n\n\n3331\n7644-OMVMY\nMale\n0\nYes\nYes\n0\nYes\nNo\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n19.85\n\nNo\n\n\n3826\n3213-VVOLG\nMale\n0\nYes\nYes\n0\nYes\nYes\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n25.35\n\nNo\n\n\n4380\n2520-SGTTA\nFemale\n0\nYes\nYes\n0\nYes\nNo\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n20.00\n\nNo\n\n\n5218\n2923-ARZLG\nMale\n0\nYes\nYes\n0\nYes\nNo\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nOne year\nYes\nMailed check\n19.70\n\nNo\n\n\n6670\n4075-WKNIU\nFemale\n0\nYes\nYes\n0\nYes\nYes\nDSL\nNo\n...\nYes\nYes\nYes\nNo\nTwo year\nNo\nMailed check\n73.35\n\nNo\n\n\n6754\n2775-SEFEE\nMale\n0\nNo\nYes\n0\nYes\nYes\nDSL\nYes\n...\nNo\nYes\nNo\nNo\nTwo year\nYes\nBank transfer (automatic)\n61.90\n\nNo\n\n\n\n\n12 rows × 21 columns\n\n\n\n\nBerdasarkan data diatas, ketika TotalChargesnya kosong maka nilai tenure-nya juga 0. Ini menandakan bahwa rows tersebut merupakan customer yang baru bergabung (belum ada charges). Jumlahnya hanya 12 baris, let’s drop it.\n\n\n\nTrue\n\n\n\nPenjelasan fitur baru:  1.Services = services/produk yang digunakan yaitu ‘Phone Only’, ‘Internet Only’ atau ‘Both. 2.TotalBenefits = jumlah benefit yang digunakan oleh customer. Benefit yang dimaksud adalah ’OnlineSecurity’, ‘DeviceProtection’, ‘OnlineBackup’, ‘TechSupport’, ‘StreamingTV’, ‘StreamingMovies’.\n\n\nSaya mengubah nilai SeniorCitizen dari numerik menjadi string agar lebih aesthethic saat melakukan EDA nantinya.\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 7031 entries, 0 to 7030\nData columns (total 22 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   gender            7031 non-null   object \n 1   SeniorCitizen     7031 non-null   object \n 2   Partner           7031 non-null   object \n 3   Dependents        7031 non-null   object \n 4   tenure            7031 non-null   int64  \n 5   PhoneService      7031 non-null   object \n 6   MultipleLines     7031 non-null   object \n 7   InternetService   7031 non-null   object \n 8   OnlineSecurity    7031 non-null   object \n 9   OnlineBackup      7031 non-null   object \n 10  DeviceProtection  7031 non-null   object \n 11  TechSupport       7031 non-null   object \n 12  StreamingTV       7031 non-null   object \n 13  StreamingMovies   7031 non-null   object \n 14  Contract          7031 non-null   object \n 15  PaperlessBilling  7031 non-null   object \n 16  PaymentMethod     7031 non-null   object \n 17  MonthlyCharges    7031 non-null   float64\n 18  TotalCharges      7031 non-null   float64\n 19  Churn             7031 non-null   object \n 20  Services          7031 non-null   object \n 21  TotalBenefits     7031 non-null   int64  \ndtypes: float64(2), int64(2), object(18)\nmemory usage: 1.2+ MB\n\n\n\nColumns non-null entry sudah sesuai data entry, yang artinya tidak ada missing value. Data type juga sudah sesuai.\n\n\n\n0       13400.000\n5        1357.404\n18        788.048\n19        330.214\n3         213.633\n128        73.511\n47         72.615\n4631       64.286\n5802       63.380\n20         58.263\n6247       57.534\n80         57.330\n299        55.285\n121        51.534\n4195       44.990\nName: TotalChargesDiff, dtype: float64\n\n\n\nDisini saya membuat 1 kolom yaitu dengan tujuan untuk membandingkan seberapa jauh nilai totalcharges yang asli dan totalcharges dari perkalian tenure dan monthlycharges. Untuk data yang berbeda terlalu jauh (diatas 40%) maka akan didrop.\n\n\n\nTotalNumericalData = 4\nTotalCategoricalData = 18\nNumerical = ['tenure', 'MonthlyCharges', 'TotalCharges', 'TotalBenefits']\nCategorical = ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'Churn', 'Services']\n\n\n\nMayoritas kolom adalah categorical."
  },
  {
    "objectID": "posts/post-with-code/index.html#exploratory-data-analysis.",
    "href": "posts/post-with-code/index.html#exploratory-data-analysis.",
    "title": "Table Of Contents",
    "section": "Exploratory data analysis.",
    "text": "Exploratory data analysis.\n\n\nDescriptive Statistics\n\n\n\n\n\n\n\n\n\ntenure\nMonthlyCharges\nTotalCharges\nTotalBenefits\n\n\n\n\ncount\n7012.000000\n7012.000000\n7012.000000\n7012.000000\n\n\nmean\n32.506560\n64.732760\n2286.410207\n2.042926\n\n\nstd\n24.564234\n30.109753\n2265.759401\n1.835251\n\n\nmin\n1.000000\n12.000000\n13.500000\n0.000000\n\n\n25%\n9.000000\n35.450000\n402.437500\n0.000000\n\n\n50%\n29.000000\n70.300000\n1397.250000\n2.000000\n\n\n75%\n56.000000\n89.850000\n3784.125000\n3.000000\n\n\nmax\n140.000000\n118.750000\n8684.800000\n6.000000\n\n\n\n\n\n\n\n\n1.Semua kolom sepertinya sudah cukup simetris (nilai medan dan median mendekati) kecuali untuk kolom TotalCharges (positive skew). 2.Perhitungan kolom TotalCharges adalah kurang lebih tenure * MonthlyCharges. 3.Nilai min max setiap kolom juga wajar, tidak ada nilai negatif. Untuk TotalBenefits wajar ada nilai 0 karena ada customers yang tidak mengambil benefits sama sekali.\n\n\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nChurn\nServices\n\n\n\n\ncount\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n\n\nunique\n2\n2\n2\n2\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n2\n4\n2\n3\n\n\ntop\nMale\nNo\nNo\nNo\nYes\nNo\nFiber optic\nNo\nNo\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\nNo\nBoth\n\n\nfreq\n3542\n5874\n3624\n4920\n6336\n3372\n3087\n3486\n3075\n3074\n3459\n2798\n2769\n3854\n4155\n2354\n5155\n4821\n\n\n\n\n\n\n\n\n1.Pada setiap kolom tidak ada nilai unique values yang terlalu banyak (paling banyak hanya 4 di PaymentMethod). 2.Gender Male adalah yang paling banyak tetapi jumlahnya hanya sekitar 3500-an dari 7000 entries, yang artinya hanya beda tipis dengan gender Female. 3.Mayoritas SeniorCitizen, Partner dan Dependents adalah No yang artinya kebanyakan orang muda yang single dan tak ada tanggungan. 4.Mayoritas juga memakai PhoneService tetapi tanpa MultipleLines. 5.InternetService terbanyak adalah Fiber optic. 6.Untuk benefits (dari OnlineSecurity-StreamingMovies) mayoritas adalah No atau mayoritas tidak menggunakan benefits yang ada. 7.Contract terbanyak adalah Month-to-month, mayoritas customer tidak siap berkomitment panjang menggunakan produk telco ini. 8.PaperlessBilling kebanyakan Yes dan favorit paymentmethod adalah Electronic check. 9.Mayoritas customer pada dataset ini adalah kebanyakan yang tidak churned. 10.Untuk services terbanyak ada pada ‘Both’ sebanyak 4832, artinya mayoritas customers menggunakan internet service dan phone service sekaligus.\n\n\n\nValue counts for column gender:\nMale      3542\nFemale    3470\nName: gender, dtype: int64\n------------------------------\n\n\nValue counts for column SeniorCitizen:\nNo     5874\nYes    1138\nName: SeniorCitizen, dtype: int64\n------------------------------\n\n\nValue counts for column Partner:\nNo     3624\nYes    3388\nName: Partner, dtype: int64\n------------------------------\n\n\nValue counts for column Dependents:\nNo     4920\nYes    2092\nName: Dependents, dtype: int64\n------------------------------\n\n\nValue counts for column PhoneService:\nYes    6336\nNo      676\nName: PhoneService, dtype: int64\n------------------------------\n\n\nValue counts for column MultipleLines:\nNo                  3372\nYes                 2964\nNo phone service     676\nName: MultipleLines, dtype: int64\n------------------------------\n\n\nValue counts for column InternetService:\nFiber optic    3087\nDSL            2410\nNo             1515\nName: InternetService, dtype: int64\n------------------------------\n\n\nValue counts for column OnlineSecurity:\nNo                     3486\nYes                    2011\nNo internet service    1515\nName: OnlineSecurity, dtype: int64\n------------------------------\n\n\nValue counts for column OnlineBackup:\nNo                     3075\nYes                    2422\nNo internet service    1515\nName: OnlineBackup, dtype: int64\n------------------------------\n\n\nValue counts for column DeviceProtection:\nNo                     3074\nYes                    2427\nNo internet service    1511\nName: DeviceProtection, dtype: int64\n------------------------------\n\n\nValue counts for column TechSupport:\nNo                     3459\nYes                    2038\nNo internet service    1515\nName: TechSupport, dtype: int64\n------------------------------\n\n\nValue counts for column StreamingTV:\nNo                     2798\nYes                    2699\nNo internet service    1515\nName: StreamingTV, dtype: int64\n------------------------------\n\n\nValue counts for column StreamingMovies:\nNo                     2769\nYes                    2728\nNo internet service    1515\nName: StreamingMovies, dtype: int64\n------------------------------\n\n\nValue counts for column Contract:\nMonth-to-month    3854\nTwo year          1689\nOne year          1469\nName: Contract, dtype: int64\n------------------------------\n\n\nValue counts for column PaperlessBilling:\nYes    4155\nNo     2857\nName: PaperlessBilling, dtype: int64\n------------------------------\n\n\nValue counts for column PaymentMethod:\nElectronic check             2354\nMailed check                 1599\nBank transfer (automatic)    1539\nCredit card (automatic)      1520\nName: PaymentMethod, dtype: int64\n------------------------------\n\n\nValue counts for column Churn:\nNo     5155\nYes    1857\nName: Churn, dtype: int64\n------------------------------\n\n\nValue counts for column Services:\nBoth             4821\nPhone Only       1515\nInternet Only     676\nName: Services, dtype: int64\n------------------------------\n\n\n\n\n\n\nUnivariate Analysis\n\n\n\n\n\n\nTerdapat 1 outliers yang tidak wajar, row tersebut akan didrop.\n\n\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\nServices\nTotalBenefits\n\n\n\n\n1\nMale\nNo\nNo\nNo\n140\nYes\nNo\nDSL\nYes\nYes\n...\nNo\nNo\nMonth-to-month\nYes\nMailed check\n53.85\n7560.0\nYes\nBoth\n2\n\n\n\n\n1 rows × 22 columns\n\n\n\n\n\n\n\n\n\n1.Distribusi kolom tenure berbentuk U-shaped, mayoritas customers adalah customer yang sangat baru atau customer yang sangat lama. 2.Untuk MonthlyCharges, kebanyakan customers terdapat pada rentan &lt; 30 USD lalu frekuensinya drop pada range 30 - 40 USD dan naik kembali sampai tertinggi ada di sekitar 80 USD. Sepertinya produk dengan range harga 30 - 40 USD kurang diminati atau terkesan tanggung. 3.Pada TotalCharges, semakin tinggi TotalCharges maka frekuensinya semakin sedikit (Positive Skew). 4.Untuk TotalBenefits, Benefit 0 adalah yang tertinggi.\n\n\n\n\n\n\n\n1.Untuk paymentmethod, terlihat electronic check adalah terfavorit namun untuk metode lain terlihat cukup equal satu sama lain. 2.Untuk phone service, terlihat bahwa mayoritas adalah pengguna phone service. Jumlahnya sangat berbeda jauh dengan yang tidak (imbalanced) sedangkan untuk multiple line nya mayoritas memilih ‘No’. 3.Untuk SeniorCitizen juga sama, perbandingan antara ‘No’ dan ‘Yes’ cukup jauh yaitu mayoritas ada pada ‘No’. 4.Untuk services ‘Both’ juga mendominasi cukup jauh dari Internet Only dan Phone Only. 5.Untuk contract, ‘Month-to-month’ contract yang paling mendominasi disusul oleh ‘Two year’ dan ‘One year’ tetapi gap antara ‘Two year’ dan ‘One year’ tidak berbeda begitu jauh. 6.Mayoritas ternyata tidak memiliki partner, namun gap nya terlihat tipis antara ‘Yes’ dan ‘No’. 7.Mayoritas tidak memiliki dependent. 8.Untuk benefit (OnlineSecurity sampai StreamingMovies) terlihat bahwa mayoritas customer lebih memilih ‘No’. 9.Lebih banyak customer memilih paperlessbilling dari yang tidak. 10.Mayoritas customer pada dataset ini adalah yang tidak churn.\n\n\n\nMultivariate Analysis\n\n\n\n\n\nDibawah saya jabarkan beberapa kolom yang menarik : 1.Untuk SeniorCitizen yang ‘Yes’, terlihat churn probabilitynya lebih tinggi dari yang ‘No’. 2.Untuk Partner dan Dependents, Churn probability lebih rendah jika nilainya ‘Yes’. 3.Customer yang tidak menggunakan MultipleLines, churn probabilitynya lebih rendah dari yang menggunakan MultipleLines. 4.Churn probability fiber optic jauh lebih tinggi dari DSL. 5.Untuk kolom benefits (OnlineSecurity sampai StreamingMovies), churn probabilitynya lebih rendah jika nilainya ‘Yes’ dari pada yang ‘No’. 6.Untuk Contract, walaupun jumlah Month-to-month contract merupakan yang tertinggi namun churn probabilitynya juga merupakan yang tertinggi. 7.Untuk PaymentMethod kasusnya juga mirip dengan contract, walaupun Electronic check merupakan pilihan mayoritas namun churn probabilitnya juga yang tertinggi. 8.Untuk services, ‘Both’ terlihat memiliki churn probability tertinggi dari yang lain.\n\n\n\n\n\nTerlihat pada kolom tenure, bahwa semakin tinggi tenure maka semakin tinggi churn probability. Untuk kolom MonthlyCharges dan TotalCharges sepertinya tidak ada banyak insights yang bisa kita dapat (tidak terdapat relationship yang jelas), Untuk kolom TotalBenefits dapat dilihat bahwa untuk distribusi not churn tertinggi ada pada 0 lalu drop dan naik kembali sampai tertinggi ada di angka 3 dan kemudian drop kembali sampai akhir sedangkan untuk yang churn semakin banyak benefits maka semakin rendah frekuensinya.\n\n\n\n\n\n\n1.TotalBenefits dan TotalCharges memiliki korelasi yang cukup kuat di angka 0.75. 2.MonthlyCharges memiliki korelasi yang cukup kuat dengan TotalBenefits dan TotalCharges. 3.PaperlessBilling memiliki korelasi sedang dengan MonthlyCharges. 4.PhoneService memiliki korelasi rendah dengan MonthlyCharges. 5.tenure memiliki korelasi rendah terhadap MonthlyCharges, korelasi sedang terhadap Churn dan TotalBenefits dan korelasi tinggi terhadap TotalCharges. 6.Partner memiliki korelasi sedang terhadap TotalCharges, tenure dan Dependents. 7.Tenure dan churn memiliki korelasi negatif yang sedang, dimana semakin tinggi tenure maka semakin kecil kemungkinan customers untuk churn. 8.Tenure dan totalbenefits memiliki korelasi sedang. Perlu diingat bahwa korelasi tidak sama dengan kausasi (saling berpengaruh). Walaupun hubungan korelasi tinggi namun bukan berarti bahwa kedua hal tersebut saling berpengaruh. Contoh korelasi antara TotalCharges dan TotalBenefits cukup tinggi yaitu diangka 0.75. Namun sebenarnya TotalBenefits tidak secara langsung mempengaruhi TotalCharges, melainkan tenure & MonthlyCharges lah yang mempengaruhi. Contoh kedua yaitu correlation antara PaperlessBilling dan Monthlycharges yaitu sebesar 0.35, padahal sebenarnya kedua hal ini sama sekali tidak berpengaruh, hanya saja customers yang mengambil produk MonthlyCharges yang tinggi lebih cenderung juga memilih PaperlessBilling. Tetapi bukan karena PaperlessBilling mempengaruhi MonthlyCharges(cmiiw).\n\n\nAda beberapa hubungan kolom yang menarik yang akan saya bahas di deep dive EDA."
  },
  {
    "objectID": "posts/post-with-code/index.html#deep-dive-exploratory-data-analysis",
    "href": "posts/post-with-code/index.html#deep-dive-exploratory-data-analysis",
    "title": "Table Of Contents",
    "section": "Deep-Dive Exploratory Data Analysis",
    "text": "Deep-Dive Exploratory Data Analysis\n\n\nServices & Internet service analysis\n\n\n\n\n\n\nQ1. Internet service apa yang paling diminati oleh customer yang mengambil kedua paket phone + internet sekaligus dengan paket internet only? Ans. Internet service yang paling diminati pada paket phone + internet adalah fiber optic sedangkan untuk internet only, internet service yang tersedia hanya DSL. Mungkin untuk menggunakan internet fiber optic juga diperlukan sambungan telepon sedangkan untuk DSL tidak harus.\n\n\n\n\n\n\n\nQ2. Bagaimana probabilitas churn antar services dan internet service?? jelaskan! Ans. Untuk services, pengguna kedua internet + phone sekaligus adalah yang tertinggi yaitu lebih dari 30% sedangkan yang terendah adalah phone only dimana hanya sekitar 7% yang artinya produk phone dari perusahaan ini sudah sangat bagus. Untuk internet service, walaupun mayoritas memilih fiber optic namun probabilitas churnnya merupakan yang tertinggi yaitu sekitar 40% lebih, dimana DSL hanya 18%.\n\n\n\nInternetService\nDSL            2.656704\nFiber optic    2.556527\nName: TotalBenefits, dtype: float64\n\n\n\nQ3. Apakah jenis internet service yang digunakan mempengaruhi jumlah benefits yang diambil? Ans. Tidak, bisa dilihat bahwa rata-rata benefits antara customers fiber optic dan DSL cukup sama yaitu sekitar 2 - 3 benefits.\n\n\n\nMonthly Charges Analysis\n\n\n\n\n\n\nQ4. Berapa perbedaan MonthlyCharges antara DSL dan Fiber optic? Ans. Setelah melakukan analisa dengan mengubah berbagai parameter, didapat bahwa Fiber optic lebih mahal sekitar 25 - 30 USD.\n\n\n\nMultipleLines\nNo     19.957316\nYes    24.977812\nName: MonthlyCharges, dtype: float64\n\n\n\n\n\n\n\n\nQ5. Berapakah produk phone service dengan multipleline dan yang tidak? Ans. Harga phone service tanpa multipleline adalah sekitar 20 USD dan sekitar 25 USD jika memakai multipleline.\n\n\n\n\n\n\n\nQ6. Buat segmentasi pemakaian produk terhadap MonthlyCharges dan buat plot probabilitas churnya! Ans. Penjelasan warna area: 1.Untuk warna magenta : 92% pengguna phone only dan 8% pengguna internet only (DSL). 2.Untuk warna hijau : 67% pengguna both internet & phone service (91% DSL, 9% Fiber optic) dan 33% pengguna internet only (DSL). 3.Untuk warna orange : 100% pengguna both internet & phone service (83% pengguna fiber optic, 17% pengguna DSL). Pada plot ini bisa dilihat bahwa MonthlyCharges ter-rendah merupakan produk phone service tanpa internet. Kedua, mayoritas pengguna DSL berada pada rentan 30 - 70 USD dan fiber optic diatas 70 USD. Ketiga, melihat probability plot yang dikanan bahwa kenaikan churned probability jauh lebih tinggi dari not churn pada monthly charges +-60 - 90 USD… ini artinya terdapat kenaikan volume dari customers pada range harga ini namun kenaikan customers yang churned jauh lebih banyak secara rasio dari pada yang not churn.\n\n\n\n\n\n\n\nQ7. Jelaskan hubungan antara TotalBenefits dengan MonthlyCharges!  Ans. Bisa dilihat dari kedua plots diatas bahwasannya semakin banyak benefits yang diambil maka semakin mahal juga MonthlyChargesnya. Kenaikan setiap MonthlyCharges per benefit juga terlihat cukup equal yaitu sekitar 7 dollar setiap penambahan 1 benefits. FYI, jika kita memperhatikan pada plot sebelah kiri, terlihat bahwa ‘spread’ atau penyebaran nilai dari MonthlyCharges disetiap benefit cukup beragam, padahal kolom-kolom yang mempengaruhi nilai MonthlyCharges sudah difilter. Ini berarti masih ada variabel lain yang mempengaruhi nilai MonthlyCharges.\n\n\n\n\n\n\n\n\n\n\nBenefit\nMinCharges\nMaxCharges\nMeanCharges\nMedianCharges\n\n\n\n\n0\nOnlineSecurity\n73.2\n80.3\n74.965278\n75.0\n\n\n0\nOnlineBackup\n72.75\n76.65\n74.675556\n74.65\n\n\n0\nDeviceProtection\n68.95\n76.65\n74.213333\n74.8\n\n\n0\nTechSupport\n73.85\n76.55\n75.045455\n74.7\n\n\n0\nStreamingTV\n77.65\n81.9\n79.728906\n79.725\n\n\n0\nStreamingMovies\n12.0\n86.45\n79.078226\n80.075\n\n\n\n\n\n\n\n\nQ8. Bagaimana perbandingan harga antara benefit? benefit manakah yang paling mahal? Ans. Bisa dilihat bahwa benefit dari OnlineSecurity sampai TechSupport harganya cukup sama sedangkan benefit StreamingTV dan StreamingMovies memiliki harga yang lebih tinggi dari yang lain yaitu sekitar 4 - 5 USD lebih tinggi. Data harga diatas termasuk harga fiber optic dan phone service tanpa multiplelines, jika ingin mengetahui harga per benefit maka tinggal dikurangi 70 USD saja.\n\n\n\nAnomaly detection\nDari analisa EDA diatas kita bisa melakukan pengecekan terhadap nilai MonthlyCharges, apakah terdapat nilai yang tidak sesuai?\n\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\nServices\nTotalBenefits\nMonthlyChargesEstimationDifference\n\n\n\n\n12\nFemale\nNo\nYes\nYes\n69\nYes\nYes\nFiber optic\nYes\nYes\n...\nYes\nTwo year\nNo\nCredit card (automatic)\n29.00\n2050.00\nNo\nBoth\n6\n296.551724\n\n\n389\nMale\nNo\nYes\nYes\n69\nYes\nYes\nFiber optic\nNo\nNo\n...\nYes\nMonth-to-month\nYes\nCredit card (automatic)\n12.00\n880.00\nYes\nBoth\n3\n733.333333\n\n\n666\nMale\nNo\nYes\nYes\n1\nYes\nNo\nFiber optic\nNo\nNo\n...\nYes\nMonth-to-month\nNo\nElectronic check\n12.00\n13.50\nYes\nBoth\n1\n566.666667\n\n\n859\nMale\nNo\nNo\nYes\n45\nYes\nYes\nFiber optic\nNo\nNo\n...\nYes\nTwo year\nNo\nBank transfer (automatic)\n26.41\n1189.00\nNo\nBoth\n3\n278.644453\n\n\n1439\nFemale\nNo\nNo\nNo\n60\nYes\nNo\nFiber optic\nNo\nYes\n...\nYes\nTwo year\nYes\nElectronic check\n18.26\n1095.60\nNo\nBoth\n4\n447.645126\n\n\n2185\nMale\nYes\nNo\nNo\n34\nYes\nNo\nFiber optic\nNo\nYes\n...\nYes\nOne year\nYes\nElectronic check\n21.63\n735.42\nNo\nBoth\n4\n362.320851\n\n\n4090\nFemale\nNo\nNo\nNo\n59\nYes\nYes\nFiber optic\nYes\nYes\n...\nYes\nMonth-to-month\nYes\nBank transfer (automatic)\n31.26\n1846.55\nNo\nBoth\n4\n219.897633\n\n\n5848\nFemale\nYes\nNo\nNo\n1\nYes\nNo\nFiber optic\nNo\nYes\n...\nYes\nMonth-to-month\nYes\nElectronic check\n15.00\n15.56\nYes\nBoth\n2\n466.666667\n\n\n6718\nFemale\nYes\nNo\nNo\n1\nYes\nNo\nFiber optic\nNo\nNo\n...\nYes\nMonth-to-month\nYes\nElectronic check\n21.00\n22.10\nYes\nBoth\n2\n304.761905\n\n\n\n\n9 rows × 23 columns\n\n\n\nRecap – What we know so far 1.Hal yang mempengaruhi MonthlyCharges adalah services, internet service, multiplelines, totalbenefits dan jenis benefitnya. 2.Phone service yang menggunakan multiple line lebih mahal dari yang tidak (lebih mahal +- 5 USD). 3.Semua pengguna internet fiber optic pasti menggunakan phone service. 4.Pengguna fiber optic lebih banyak dari DSL, namun churn probabilitynya juga jauh lebih tinggi fiber optic dari pada DSL. 5.Fiber optic lebih mahal sekitar 25 - 30 USD dari DSL. 6.Internet service tidak berpengaruh terhadap jumlah benefits yang diambil. 7.Churn probability meningkat drastis saat MonthlyCharges mulai menyentuh 60 USD. 8.Semua benefit memiliki harga yang serupa kecuali untuk StreamingTV dan StreamingMovies dimana kedua benefit ini lebih mahal sekitar 4 - 5 USD.\n\n\nCustomer analysis\n\nDi atas saya membuat fitur baru bernama ‘Status’ dimana nilainya adalah: 1.Jika tidak ada partner dan dependents maka nilainya ‘Single’. 2.Jika hanya ada partner saja maka nilainya ‘Partner Only’. 3.Jika hanya ada dependent saja maka nilainya ‘Dependent Only’. 4.Jika terdapat partner dan dependent maka nilainya ‘Both’.\n\n\n\n\n\n\n\nQ9. Jelaskan segmentasi customer berdasarkan status partner dan dependent! Ans. Jumlah terbanyak customer adalah yang single, disusul oleh Partner only dan both yang jumlahnya cukup berimbang dan yang terakhir dependent only.\n\n\n\n\n\n\n\nQ10. Bagaimana behaviour status customer terhadap tenure, MonthlyCharges dan TotalBenefits? Bisa dilihat plots diatas, bahwa customer dengan partner only adalah merupakan customer paling bagus. Mereka adalah customer ter-loyal, mereka mengambil produk dengan monthly charges tertinggi dan mereka merupakan pengguna benefits terbanyak. Customer yang memiliki kedua partner dan dependent juga cukup bagus namun tidak sebagus yang partner only. Untuk customer single, monthly charges yang dibayar cukup tinggi namun tenure nya tidak terlalu lama.\n\n\n\n\n\n\n\nQ11. Status customer manakah yang paling tinggi churn probabilitynya? Ans. Customer Single adalah customer yang paling tinggi churn probabilitynya yang hampir mencapai 35%, disusul oleh partner only, dependent only dan both.\n\n\n\n\n\n\n\n\n\n\n\n\nQ12. Bagaimana perbedaan status antara SeniorCitizen dan yang tidak? Dari grafik diatas, bisa dilihat bahwa orang muda dan tua mayoritas adalah single. Untuk orang tua, jumlah partner yang dimiliki sangat tinggi namun jumlah dependentsnya sangat rendah sedangkan untuk yang lebih muda, jumlah partner dan dependent lebih seimbang.IMHO, menurut saya ini cukup logis karena memang kebanyakan orang tua yang sudah pensiun tidak memiliki tanggungan lagi, sedangkan untuk orang lebih muda dan masih bekerja, jumlah tanggungan mereka pasti akan lebih banyak.\n\n\n\n\n\n\n\nQ13. Analisa benefit yang diambil di setiap segmen customer! Berdasarkan plot diatas, customer single dan partner only mayoritas memilih benefit hiburan yaitu streaming tv dan streaming movies disusul oleh online backup dan device protection tetapi untuk tech support dan online security terlihat tidak terlalu diminati. Untuk customer dependent, benefit yang terpenting adalah online security dan online backup sedangkan yang terendah adalah device protection. Untuk customer both terlihat bahwa semua nilai benefit tidak berbeda begitu jauh satu sama lain atau nilainya cukup equal. Kesimpulan : customer tanpa dependent terlihat lebih mementingkan benefit hiburan sedangkan yang memiliki dependent terlihat lebih mementingkan keamanan. Terakhir benefit online backup juga cukup penting disemua kalangan customer.\n\n\n\nBenefits analysis\n\n\n\n\n\n\nQ14. Berapa TotalBenefits terbanyak dan benefit apa saja yang paling banyak dipilih oleh customer? Terlihat bahwa rata2 customer kebanyakan mengambil 3 benefits. Untuk benefit terfavorit ada pada sesi entertain yaitu StreamingTV dan StreamingMovies. FYI, untuk TotalBenefits saat kita melakukan standard EDA yang tertinggi adalah 0 benefits dikarenakan produk ‘Phone Only’ semuanya terhitung 0 benefits. Analisa Totalbenefits yang benar adalah kita mengexclude ‘Phone Only’ karena benefit hanya bisa diambil jika memiliki koneksi internet.\n\n\n\n\n\n\n\nQ15. Plot dan jelaskan churn probability untuk TotalBenefits dan benefits! Totalbenefit dengan kemungkinan churn tertinggi ada pada 1 benefit. Walaupun benefit streamingTV dan streamingMovies merupakan benefit yang paling diminati namun secara rasio, kedua benefit ini malah yang memiliki kemungkinan churn tertinggi.\n\n\n\nChurn analysis\n\nQ16. Temukan dan jelaskan pattern perilaku customer yang churn dan tidak!\n\n\nPada tahap ini, saya akan menganalisa pattern behaviour customer yang churn dan tidak. Namun, saya perlu memplot 5 dimensi features dalam 1 scatter plot. Tentu hal ini akan sangat membingungkan dan saya akan membagi menjadi 2 scatter plot saja. First, saya akan membuat scatter plot tenure vs MonthlyCharges vs churn. Kedua, saya akan membuat scatter plot tenure vs MonthlyCharges vs TotalBenefits vs InternetService.\n\n\n\n\n\n\n\nBerdasarkan hasil analisa sebelumnya, didapat bahwa mayoritas customer ada pada range MonthlyCharges sekitar 60 dollar sampai dengan sekitar 100 dollar. Pada range harga ini saya menemukan sebuah pattern yang cukup jelas yaitu pada area hijau terlihat bahwa banyak customer churn berkumpul pada area ini, sedangkan pada range harga yang sama pada area biru terlihat bahwa justru customer tidak churn yang mendominasi. Pada area hijau nilai tenurenya cukup rendah yaitu hanya 0 - 20 bulan saja (new customers), sedangkan pada area biru nilai tenurenya sudah tinggi (loyal customers).\n\n\n\n\n\n\n\nMasih pada area chart yang sama, saya merombak sedikit features pada scatterplot ini. Saya mengganti feature Churn menjadi TotalBenefits dan InternetService. Bisa dilihat secara jelas bahwa pada area chart hijau, mayoritas internet service yang digunakan adalah fiber optic namun totalbenefits yang diambil sedikit sedangkan pada area chart biru mayoritas menggunakan internet service DSL namun totalbenefitsnya lebih banyak. Pada range harga ini, customers hanya dihadapkan oleh 2 pilihan yaitu menggunakan internet fiber optic yang lebih mahal dari DSL tetapi imbasnya totalbenefits yang bisa dipilih lebih sedikit atau menggunakan internet DSL yang murah namun totalbenefits yang diambil bisa lebih banyak. Dan ternyata customers lebih memilih internet service DSL yang lebih murah namun dengan totalbenefits yang lebih banyak. Kemungkinan hal ini bisa terjadi karena perbedaan harga antara fiber optic dan dsl tidak setara dengan perbedaan keuntungannya yang membuat fiber optic menjadi tidak worth it."
  },
  {
    "objectID": "posts/post-with-code/index.html#modelling",
    "href": "posts/post-with-code/index.html#modelling",
    "title": "Table Of Contents",
    "section": "Modelling",
    "text": "Modelling\n\n\nFeature selection & encoding\n\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\nServices\nTotalBenefits\nMonthlyChargesEstimationDifference\nStatus\n\n\n\n\n0\nMale\nNo\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\n...\nOne year\nNo\nMailed check\n56.95\n1889.50\nNo\nBoth\n2\n3.424056\nSingle\n\n\n1\nFemale\nNo\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\nNo\n...\nMonth-to-month\nYes\nElectronic check\n70.70\n151.65\nYes\nBoth\n0\n0.990099\nSingle\n\n\n2\nMale\nNo\nNo\nYes\n22\nYes\nYes\nFiber optic\nNo\nYes\n...\nMonth-to-month\nYes\nCredit card (automatic)\n89.10\n1949.40\nNo\nBoth\n2\n1.010101\nDependent Only\n\n\n3\nFemale\nNo\nNo\nNo\n10\nNo\nNo phone service\nDSL\nYes\nNo\n...\nMonth-to-month\nNo\nMailed check\n29.75\n301.90\nNo\nInternet Only\n1\n0.840336\nSingle\n\n\n4\nFemale\nNo\nYes\nNo\n28\nYes\nYes\nFiber optic\nNo\nNo\n...\nMonth-to-month\nYes\nElectronic check\n104.80\n3046.05\nYes\nBoth\n4\n0.190840\nPartner Only\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6997\nMale\nNo\nYes\nYes\n24\nYes\nYes\nDSL\nYes\nNo\n...\nOne year\nYes\nMailed check\n84.80\n1990.50\nNo\nBoth\n5\n0.235849\nBoth\n\n\n6998\nFemale\nNo\nYes\nYes\n72\nYes\nYes\nFiber optic\nNo\nYes\n...\nOne year\nYes\nCredit card (automatic)\n103.20\n7362.90\nNo\nBoth\n4\n1.744186\nBoth\n\n\n6999\nFemale\nNo\nYes\nYes\n11\nNo\nNo phone service\nDSL\nYes\nNo\n...\nMonth-to-month\nYes\nElectronic check\n29.60\n346.45\nNo\nInternet Only\n1\n1.351351\nBoth\n\n\n7000\nMale\nYes\nYes\nNo\n4\nYes\nYes\nFiber optic\nNo\nNo\n...\nMonth-to-month\nYes\nMailed check\n74.40\n306.60\nYes\nBoth\n0\n0.806452\nPartner Only\n\n\n7001\nMale\nNo\nNo\nNo\n66\nYes\nNo\nFiber optic\nYes\nNo\n...\nTwo year\nYes\nBank transfer (automatic)\n105.65\n6844.50\nNo\nBoth\n5\n0.615239\nSingle\n\n\n\n\n7002 rows × 24 columns\n\n\n\n\n\nSplits data and define custom function\n\n\nModel building 1 / Hyperparameter tuning + threshold tuning\n\n\nNameError: name 'b' is not defined\n\n\n\n\nModel building 2 / Hyperparameter tuning + threshold tuning + SMOTE\n\n\nModel building 3 / Hyperparameter tuning + threshold tuning + custom weight\n#—————stop——————————————-"
  },
  {
    "objectID": "posts/post-with-code/final.html",
    "href": "posts/post-with-code/final.html",
    "title": "Table Of Contents",
    "section": "",
    "text": "• Introduction. • Data Introduction. • Data Preparation (Import libraries, data cleaning & data wrangling). • Exploratory data analysis. • Feature selection. • Modelling."
  },
  {
    "objectID": "posts/post-with-code/final.html#data-preparation-import-libraries-data-cleaning-data-wrangling",
    "href": "posts/post-with-code/final.html#data-preparation-import-libraries-data-cleaning-data-wrangling",
    "title": "Table Of Contents",
    "section": "Data Preparation (Import libraries, data cleaning & data wrangling)",
    "text": "Data Preparation (Import libraries, data cleaning & data wrangling)\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stat\nfrom scipy.stats import gaussian_kde\nsns.set()\n\n\ngithub = 'https://raw.githubusercontent.com/vertikalwil/Data-Analyst/main/telco.csv'\n\n\ndf = pd.read_csv('github')\ndf.head()\n\n\n\n\n\n\n\n\ncustomerID\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\n...\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\nHobby\n\n\n\n\n0\n7590-VHVEG\nFemale\n0\nYes\nNo\n135\nNo\nNo phone service\nDSL\nNo\n...\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n29.85\n29.85\nNo\nSwimming\n\n\n1\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\n...\nNo\nNo\nNo\nOne year\nNo\nMailed check\n56.95\n1889.5\nNo\nRunning\n\n\n2\n3668-QPYBK\nMale\n0\nNo\nNo\n140\nYes\nNo\nDSL\nYes\n...\nNo\nNo\nNo\nMonth-to-month\nYes\nMailed check\n53.85\n7560\nYes\nHiking\n\n\n3\n7795-CFOCW\nMale\n0\nNo\nNo\n136\nNo\nNo phone service\nDSL\nYes\n...\nYes\nNo\nNo\nOne year\nNo\nBank transfer (automatic)\n42.45\n1840.75\nNo\nSwimming\n\n\n4\n9237-HQITU\nFemale\n0\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\n...\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n70.70\n151.65\nYes\nRunning\n\n\n\n\n5 rows × 22 columns\n\n\n\n\nprint(type(df.info()))\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 7043 entries, 0 to 7042\nData columns (total 22 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   customerID        7043 non-null   object \n 1   gender            7043 non-null   object \n 2   SeniorCitizen     7043 non-null   int64  \n 3   Partner           7043 non-null   object \n 4   Dependents        7043 non-null   object \n 5   tenure            7043 non-null   int64  \n 6   PhoneService      7043 non-null   object \n 7   MultipleLines     7043 non-null   object \n 8   InternetService   7043 non-null   object \n 9   OnlineSecurity    7043 non-null   object \n 10  OnlineBackup      7043 non-null   object \n 11  DeviceProtection  6627 non-null   object \n 12  TechSupport       7043 non-null   object \n 13  StreamingTV       7043 non-null   object \n 14  StreamingMovies   7043 non-null   object \n 15  Contract          6798 non-null   object \n 16  PaperlessBilling  7043 non-null   object \n 17  PaymentMethod     7043 non-null   object \n 18  MonthlyCharges    7043 non-null   float64\n 19  TotalCharges      4859 non-null   object \n 20  Churn             7043 non-null   object \n 21  Hobby             4201 non-null   object \ndtypes: float64(1), int64(2), object(19)\nmemory usage: 1.2+ MB\n&lt;class 'NoneType'&gt;\n\n\n\nmissingkolom = ['DeviceProtection','Contract','TotalCharges','Hobby']\nfor x in missingkolom:\n    print(f'Missing value of column {x} (%) : {round(df[x].isna().sum()/len(df) * 100,2)}')\n\nMissing value of column DeviceProtection (%) : 5.91\nMissing value of column Contract (%) : 3.48\nMissing value of column TotalCharges (%) : 31.01\nMissing value of column Hobby (%) : 40.35\n\n\n\n#impute missing values with univariate imputation by value proportion\ndf['DeviceProtection'] = df['DeviceProtection'].fillna(pd.Series(np.random.choice(['No','Yes','No internet service'], p = list(df['DeviceProtection'].value_counts(normalize=True)), size=len(df))))\ndf['Contract'] = df['Contract'].fillna(pd.Series(np.random.choice(['Month-to-month','Two year','One year'], p = list(df['Contract'].value_counts(normalize=True)), size=len(df))))\n\n\nAlasan melakukan imputation: 1.Missing value sedikit. 2.Kolom tidak memiliki relasi atau hubungan dikolom apapun sehingga multivariate imputasi tidak dimungkinkan. 3.Menggunakan proporsi nilai lebih tepat dari pada sekedar menggunakan nilai ‘mode’.\n\n\ndf.drop(columns=['Hobby'],inplace=True)\n\n\nAlasan melakukan delete kolom: 1.Missing value terlalu banyak. 2.Secara konteks, kolom tersebut tidak terlalu berguna dalam memberikan informasi. 3.Tidak memiliki justifikasi yang kuat (tidak bisa diimpute secara multivariate).\n\n\ndf['TotalCharges'] = df['TotalCharges'].fillna(df['tenure'] * df['MonthlyCharges'])\n\n\nAlasan melakukan imputation: 1.Walaupun missing value banyak namun imputasi tetap bisa dilakukan karena memiliki justifikasi yang kuat yaitu. 2.Kolom TotalCharges nilainya kurang lebih merupakan dari nilai tenure * MonthlyCharges. 3.Menggunakan proporsi nilai lebih tepat dari pada sekedar menggunakan nilai ‘mode’.\n\n\n#there's a space in the total charges column.\nfor x in df.TotalCharges:\n    try:\n        float(x)\n    except:\n        print(f'Unable to convert to float with this value : {x}')\n\nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \nUnable to convert to float with this value :  \n\n\n\ndf[df.TotalCharges == ' ']\n\n\n\n\n\n\n\n\ncustomerID\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\n...\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\n\n\n\n\n488\n4472-LVYGI\nFemale\n0\nYes\nYes\n0\nNo\nNo phone service\nDSL\nYes\n...\nYes\nYes\nYes\nNo\nMonth-to-month\nYes\nBank transfer (automatic)\n52.55\n\nNo\n\n\n753\n3115-CZMZD\nMale\n0\nNo\nYes\n0\nYes\nNo\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n20.25\n\nNo\n\n\n936\n5709-LVOEQ\nFemale\n0\nYes\nYes\n0\nYes\nNo\nDSL\nYes\n...\nNo\nNo\nYes\nYes\nTwo year\nNo\nMailed check\n80.85\n\nNo\n\n\n1082\n4367-NUYAO\nMale\n0\nYes\nYes\n0\nYes\nYes\nNo\nNo internet service\n...\nYes\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n25.75\n\nNo\n\n\n1334\n1768-ZAIFU\nFemale\n1\nNo\nNo\n0\nNo\nNo phone service\nDSL\nNo\n...\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n25.20\n\nYes\n\n\n1340\n1371-DWPAZ\nFemale\n0\nYes\nYes\n0\nNo\nNo phone service\nDSL\nYes\n...\nYes\nYes\nYes\nNo\nTwo year\nNo\nCredit card (automatic)\n56.05\n\nNo\n\n\n3331\n7644-OMVMY\nMale\n0\nYes\nYes\n0\nYes\nNo\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n19.85\n\nNo\n\n\n3826\n3213-VVOLG\nMale\n0\nYes\nYes\n0\nYes\nYes\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n25.35\n\nNo\n\n\n4380\n2520-SGTTA\nFemale\n0\nYes\nYes\n0\nYes\nNo\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nTwo year\nNo\nMailed check\n20.00\n\nNo\n\n\n5218\n2923-ARZLG\nMale\n0\nYes\nYes\n0\nYes\nNo\nNo\nNo internet service\n...\nNo internet service\nNo internet service\nNo internet service\nNo internet service\nOne year\nYes\nMailed check\n19.70\n\nNo\n\n\n6670\n4075-WKNIU\nFemale\n0\nYes\nYes\n0\nYes\nYes\nDSL\nNo\n...\nYes\nYes\nYes\nNo\nTwo year\nNo\nMailed check\n73.35\n\nNo\n\n\n6754\n2775-SEFEE\nMale\n0\nNo\nYes\n0\nYes\nYes\nDSL\nYes\n...\nNo\nYes\nNo\nNo\nTwo year\nYes\nBank transfer (automatic)\n61.90\n\nNo\n\n\n\n\n12 rows × 21 columns\n\n\n\n\nBerdasarkan data diatas, ketika TotalChargesnya kosong maka nilai tenure-nya juga 0. Ini menandakan bahwa rows tersebut merupakan customer yang baru bergabung (belum ada charges). Jumlahnya hanya 12 baris, let’s drop it.\n\n\ndf = df.drop(df.index[df.TotalCharges == ' ']).reset_index(drop=True)\n\n\n#check for duplicate data, if True then there's no duplicate.\ndf.customerID.nunique() == len(df) \n\nTrue\n\n\n\n#feature engineering\ndf['Services'] = df[['PhoneService','InternetService']].apply(lambda x: 'Both' if list(x).count('No') == 0 else 'Internet Only' if x[0] == 'No' else 'Phone Only', axis=1)\ndf['TotalBenefits'] = df[['OnlineSecurity','DeviceProtection','OnlineBackup','TechSupport','StreamingTV','StreamingMovies']].apply(lambda x: list(x).count('Yes'), axis=1)\n\n\nPenjelasan fitur baru:  1.Services = services/produk yang digunakan yaitu ‘Phone Only’, ‘Internet Only’ atau ‘Both. 2.TotalBenefits = jumlah benefit yang digunakan oleh customer. Benefit yang dimaksud adalah ’OnlineSecurity’, ‘DeviceProtection’, ‘OnlineBackup’, ‘TechSupport’, ‘StreamingTV’, ‘StreamingMovies’.\n\n\ndf['SeniorCitizen'] = df.SeniorCitizen.apply(lambda x: 'Yes' if x == 1 else 'No')\n\n\nSaya mengubah nilai SeniorCitizen dari numerik menjadi string agar lebih aesthethic saat melakukan EDA nantinya.\n\n\n#drop useless column\ndf.drop(columns=['customerID'], inplace=True)\n\n\ndf.tenure = df.tenure.astype('int64')\ndf.MonthlyCharges = df.MonthlyCharges.astype('float64')\ndf.TotalCharges = df.TotalCharges.astype('float64')\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 7031 entries, 0 to 7030\nData columns (total 22 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   gender            7031 non-null   object \n 1   SeniorCitizen     7031 non-null   object \n 2   Partner           7031 non-null   object \n 3   Dependents        7031 non-null   object \n 4   tenure            7031 non-null   int64  \n 5   PhoneService      7031 non-null   object \n 6   MultipleLines     7031 non-null   object \n 7   InternetService   7031 non-null   object \n 8   OnlineSecurity    7031 non-null   object \n 9   OnlineBackup      7031 non-null   object \n 10  DeviceProtection  7031 non-null   object \n 11  TechSupport       7031 non-null   object \n 12  StreamingTV       7031 non-null   object \n 13  StreamingMovies   7031 non-null   object \n 14  Contract          7031 non-null   object \n 15  PaperlessBilling  7031 non-null   object \n 16  PaymentMethod     7031 non-null   object \n 17  MonthlyCharges    7031 non-null   float64\n 18  TotalCharges      7031 non-null   float64\n 19  Churn             7031 non-null   object \n 20  Services          7031 non-null   object \n 21  TotalBenefits     7031 non-null   int64  \ndtypes: float64(2), int64(2), object(18)\nmemory usage: 1.2+ MB\n\n\n\nColumns non-null entry sudah sesuai data entry, yang artinya tidak ada missing value. Data type juga sudah sesuai.\n\n\ndf['TotalChargesDiff'] = df[['tenure','MonthlyCharges','TotalCharges']].apply(lambda x: round(abs(1 - (x[0] * x[1] / x[2])) * 100,3),axis=1)\n\n\ndf['TotalChargesDiff'].sort_values(ascending=False).head(15)\n\n0       13400.000\n5        1357.404\n18        788.048\n19        330.214\n3         213.633\n128        73.511\n47         72.615\n4631       64.286\n5802       63.380\n20         58.263\n6247       57.534\n80         57.330\n299        55.285\n121        51.534\n4195       44.990\nName: TotalChargesDiff, dtype: float64\n\n\n\ndf = df[df.TotalChargesDiff &lt; 40].reset_index(drop=True)\ndf.drop(columns=['TotalChargesDiff'], inplace=True)\n\n\nDisini saya membuat 1 kolom yaitu dengan tujuan untuk membandingkan seberapa jauh nilai totalcharges yang asli dan totalcharges dari perkalian tenure dan monthlycharges. Untuk data yang berbeda terlalu jauh (diatas 40%) maka akan didrop.\n\n\ndef numericategoric(df):\n    num = len(df._get_numeric_data().columns)\n    cat = len(df.columns) - num\n    print(\"TotalNumericalData = \" + str(num))\n    print(\"TotalCategoricalData = \" + str(cat))\n    print(\"Numerical = \" + str(list(df._get_numeric_data().columns )))\n    print(\"Categorical = \" + str(list(df.drop(df._get_numeric_data().columns, axis=1).columns)))\n\n\nnumericategoric(df)\n\nTotalNumericalData = 4\nTotalCategoricalData = 18\nNumerical = ['tenure', 'MonthlyCharges', 'TotalCharges', 'TotalBenefits']\nCategorical = ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'Churn', 'Services']\n\n\n\nMayoritas kolom adalah categorical.\n\n\n#Membagi kolom2 numerikal dan categorical \ndfnum = df._get_numeric_data()\ndfcat = df.drop(columns = dfnum.columns)"
  },
  {
    "objectID": "posts/post-with-code/final.html#exploratory-data-analysis.",
    "href": "posts/post-with-code/final.html#exploratory-data-analysis.",
    "title": "Table Of Contents",
    "section": "Exploratory data analysis.",
    "text": "Exploratory data analysis.\n\n\nDescriptive Statistics\n\ndfnum.describe()\n\n\n\n\n\n\n\n\ntenure\nMonthlyCharges\nTotalCharges\nTotalBenefits\n\n\n\n\ncount\n7012.000000\n7012.000000\n7012.000000\n7012.000000\n\n\nmean\n32.506560\n64.732760\n2286.410207\n2.042926\n\n\nstd\n24.564234\n30.109753\n2265.759401\n1.835251\n\n\nmin\n1.000000\n12.000000\n13.500000\n0.000000\n\n\n25%\n9.000000\n35.450000\n402.437500\n0.000000\n\n\n50%\n29.000000\n70.300000\n1397.250000\n2.000000\n\n\n75%\n56.000000\n89.850000\n3784.125000\n3.000000\n\n\nmax\n140.000000\n118.750000\n8684.800000\n6.000000\n\n\n\n\n\n\n\n\n1.Semua kolom sepertinya sudah cukup simetris (nilai medan dan median mendekati) kecuali untuk kolom TotalCharges (positive skew). 2.Perhitungan kolom TotalCharges adalah kurang lebih tenure * MonthlyCharges. 3.Nilai min max setiap kolom juga wajar, tidak ada nilai negatif. Untuk TotalBenefits wajar ada nilai 0 karena ada customers yang tidak mengambil benefits sama sekali.\n\n\ndfcat.describe()\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nChurn\nServices\n\n\n\n\ncount\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n7012\n\n\nunique\n2\n2\n2\n2\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n2\n4\n2\n3\n\n\ntop\nMale\nNo\nNo\nNo\nYes\nNo\nFiber optic\nNo\nNo\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\nNo\nBoth\n\n\nfreq\n3542\n5874\n3624\n4920\n6336\n3372\n3087\n3486\n3075\n3074\n3459\n2798\n2769\n3854\n4155\n2354\n5155\n4821\n\n\n\n\n\n\n\n\n1.Pada setiap kolom tidak ada nilai unique values yang terlalu banyak (paling banyak hanya 4 di PaymentMethod). 2.Gender Male adalah yang paling banyak tetapi jumlahnya hanya sekitar 3500-an dari 7000 entries, yang artinya hanya beda tipis dengan gender Female. 3.Mayoritas SeniorCitizen, Partner dan Dependents adalah No yang artinya kebanyakan orang muda yang single dan tak ada tanggungan. 4.Mayoritas juga memakai PhoneService tetapi tanpa MultipleLines. 5.InternetService terbanyak adalah Fiber optic. 6.Untuk benefits (dari OnlineSecurity-StreamingMovies) mayoritas adalah No atau mayoritas tidak menggunakan benefits yang ada. 7.Contract terbanyak adalah Month-to-month, mayoritas customer tidak siap berkomitment panjang menggunakan produk telco ini. 8.PaperlessBilling kebanyakan Yes dan favorit paymentmethod adalah Electronic check. 9.Mayoritas customer pada dataset ini adalah kebanyakan yang tidak churned. 10.Untuk services terbanyak ada pada ‘Both’ sebanyak 4832, artinya mayoritas customers menggunakan internet service dan phone service sekaligus.\n\n\nfor col in dfcat.columns:\n  print(f\"Value counts for column {col}:\")\n  print(df[col].value_counts())\n  print(\"---\"*10)\n  print(\"\\n\")\n\nValue counts for column gender:\nMale      3542\nFemale    3470\nName: gender, dtype: int64\n------------------------------\n\n\nValue counts for column SeniorCitizen:\nNo     5874\nYes    1138\nName: SeniorCitizen, dtype: int64\n------------------------------\n\n\nValue counts for column Partner:\nNo     3624\nYes    3388\nName: Partner, dtype: int64\n------------------------------\n\n\nValue counts for column Dependents:\nNo     4920\nYes    2092\nName: Dependents, dtype: int64\n------------------------------\n\n\nValue counts for column PhoneService:\nYes    6336\nNo      676\nName: PhoneService, dtype: int64\n------------------------------\n\n\nValue counts for column MultipleLines:\nNo                  3372\nYes                 2964\nNo phone service     676\nName: MultipleLines, dtype: int64\n------------------------------\n\n\nValue counts for column InternetService:\nFiber optic    3087\nDSL            2410\nNo             1515\nName: InternetService, dtype: int64\n------------------------------\n\n\nValue counts for column OnlineSecurity:\nNo                     3486\nYes                    2011\nNo internet service    1515\nName: OnlineSecurity, dtype: int64\n------------------------------\n\n\nValue counts for column OnlineBackup:\nNo                     3075\nYes                    2422\nNo internet service    1515\nName: OnlineBackup, dtype: int64\n------------------------------\n\n\nValue counts for column DeviceProtection:\nNo                     3074\nYes                    2427\nNo internet service    1511\nName: DeviceProtection, dtype: int64\n------------------------------\n\n\nValue counts for column TechSupport:\nNo                     3459\nYes                    2038\nNo internet service    1515\nName: TechSupport, dtype: int64\n------------------------------\n\n\nValue counts for column StreamingTV:\nNo                     2798\nYes                    2699\nNo internet service    1515\nName: StreamingTV, dtype: int64\n------------------------------\n\n\nValue counts for column StreamingMovies:\nNo                     2769\nYes                    2728\nNo internet service    1515\nName: StreamingMovies, dtype: int64\n------------------------------\n\n\nValue counts for column Contract:\nMonth-to-month    3854\nTwo year          1689\nOne year          1469\nName: Contract, dtype: int64\n------------------------------\n\n\nValue counts for column PaperlessBilling:\nYes    4155\nNo     2857\nName: PaperlessBilling, dtype: int64\n------------------------------\n\n\nValue counts for column PaymentMethod:\nElectronic check             2354\nMailed check                 1599\nBank transfer (automatic)    1539\nCredit card (automatic)      1520\nName: PaymentMethod, dtype: int64\n------------------------------\n\n\nValue counts for column Churn:\nNo     5155\nYes    1857\nName: Churn, dtype: int64\n------------------------------\n\n\nValue counts for column Services:\nBoth             4821\nPhone Only       1515\nInternet Only     676\nName: Services, dtype: int64\n------------------------------\n\n\n\n\n\n\nUnivariate Analysis\n\nfig, axarr = plt.subplots(1,4, figsize=(10, 4))\nfor x in dfnum.columns:\n    axarr[dfnum.columns.get_loc(x)].boxplot(df[x],patch_artist=True)\n    axarr[dfnum.columns.get_loc(x)].set_xlabel(x)\nplt.suptitle(\"Outliers checking on numeric columns\")\nfig.tight_layout(pad=1)\nplt.show()\n\n\n\n\n\nTerdapat 1 outliers yang tidak wajar, row tersebut akan didrop.\n\n\ndf[df.tenure &gt; 125]\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\nServices\nTotalBenefits\n\n\n\n\n1\nMale\nNo\nNo\nNo\n140\nYes\nNo\nDSL\nYes\nYes\n...\nNo\nNo\nMonth-to-month\nYes\nMailed check\n53.85\n7560.0\nYes\nBoth\n2\n\n\n\n\n1 rows × 22 columns\n\n\n\n\ndf.drop(index=1,inplace=True)\n\n\nfig, axarr = plt.subplots(1,4, figsize=(10, 4))\nfor x in dfnum.columns:\n    sns.histplot(dfnum[x],color='skyblue', kde=True, edgecolor='none', ax=axarr[dfnum.columns.get_loc(x)])\nplt.suptitle(\"Distribution plot\", weight='bold')\nfig.tight_layout(pad=1)\n\n\n\n\n\n1.Distribusi kolom tenure berbentuk U-shaped, mayoritas customers adalah customer yang sangat baru atau customer yang sangat lama. 2.Untuk MonthlyCharges, kebanyakan customers terdapat pada rentan &lt; 30 USD lalu frekuensinya drop pada range 30 - 40 USD dan naik kembali sampai tertinggi ada di sekitar 80 USD. Sepertinya produk dengan range harga 30 - 40 USD kurang diminati atau terkesan tanggung. 3.Pada TotalCharges, semakin tinggi TotalCharges maka frekuensinya semakin sedikit (Positive Skew). 4.Untuk TotalBenefits, Benefit 0 adalah yang tertinggi.\n\n\nplt.figure(figsize=(15,12))\n\nfeatures = dfcat.columns\nfor i in np.arange(1, len(features)+1):\n    plt.subplot(5, len(features)//3 - 2, i)\n    sns.countplot(x=df[features[i-1]], color='green')\n    plt.xticks(rotation=10)\n    plt.xlabel(features[i-1])\nplt.suptitle('CountPlot', size=19, weight='bold')\nplt.tight_layout(pad = 1)\n\n\n\n\n\n1.Untuk paymentmethod, terlihat electronic check adalah terfavorit namun untuk metode lain terlihat cukup equal satu sama lain. 2.Untuk phone service, terlihat bahwa mayoritas adalah pengguna phone service. Jumlahnya sangat berbeda jauh dengan yang tidak (imbalanced) sedangkan untuk multiple line nya mayoritas memilih ‘No’. 3.Untuk SeniorCitizen juga sama, perbandingan antara ‘No’ dan ‘Yes’ cukup jauh yaitu mayoritas ada pada ‘No’. 4.Untuk services ‘Both’ juga mendominasi cukup jauh dari Internet Only dan Phone Only. 5.Untuk contract, ‘Month-to-month’ contract yang paling mendominasi disusul oleh ‘Two year’ dan ‘One year’ tetapi gap antara ‘Two year’ dan ‘One year’ tidak berbeda begitu jauh. 6.Mayoritas ternyata tidak memiliki partner, namun gap nya terlihat tipis antara ‘Yes’ dan ‘No’. 7.Mayoritas tidak memiliki dependent. 8.Untuk benefit (OnlineSecurity sampai StreamingMovies) terlihat bahwa mayoritas customer lebih memilih ‘No’. 9.Lebih banyak customer memilih paperlessbilling dari yang tidak. 10.Mayoritas customer pada dataset ini adalah yang tidak churn.\n\n\n\nMultivariate Analysis\n\nplt.figure(figsize=(15,12))\n\nfeatures = dfcat.columns\nfor i in np.arange(1, len(features)+1):\n    plt.subplot(5, len(features)//3 - 2, i)\n    sns.countplot(data=df, x=df[features[i-1]], hue='Churn')\n    plt.legend(prop={'size': 8})\n    plt.xticks(rotation=10)\n    plt.xlabel(features[i-1])\nplt.suptitle('CountPlot vs Churned', size=19, weight='bold')\nplt.tight_layout(pad = 1)\n\n\n\n\nDibawah saya jabarkan beberapa kolom yang menarik : 1.Untuk SeniorCitizen yang ‘Yes’, terlihat churn probabilitynya lebih tinggi dari yang ‘No’. 2.Untuk Partner dan Dependents, Churn probability lebih rendah jika nilainya ‘Yes’. 3.Customer yang tidak menggunakan MultipleLines, churn probabilitynya lebih rendah dari yang menggunakan MultipleLines. 4.Churn probability fiber optic jauh lebih tinggi dari DSL. 5.Untuk kolom benefits (OnlineSecurity sampai StreamingMovies), churn probabilitynya lebih rendah jika nilainya ‘Yes’ dari pada yang ‘No’. 6.Untuk Contract, walaupun jumlah Month-to-month contract merupakan yang tertinggi namun churn probabilitynya juga merupakan yang tertinggi. 7.Untuk PaymentMethod kasusnya juga mirip dengan contract, walaupun Electronic check merupakan pilihan mayoritas namun churn probabilitnya juga yang tertinggi. 8.Untuk services, ‘Both’ terlihat memiliki churn probability tertinggi dari yang lain.\n\nfig, axarr = plt.subplots(1,4, figsize=(10, 5))\nfor x in dfnum.columns:\n    sns.histplot(data=df , x = dfnum[x],color='skyblue', kde=True, edgecolor='none', ax=axarr[dfnum.columns.get_loc(x)], hue='Churn')\nplt.suptitle(\"Distribution plot\", weight='bold')\nfig.tight_layout(pad=1)\n\n\n\n\nTerlihat pada kolom tenure, bahwa semakin tinggi tenure maka semakin tinggi churn probability. Untuk kolom MonthlyCharges dan TotalCharges sepertinya tidak ada banyak insights yang bisa kita dapat (tidak terdapat relationship yang jelas), Untuk kolom TotalBenefits dapat dilihat bahwa untuk distribusi not churn tertinggi ada pada 0 lalu drop dan naik kembali sampai tertinggi ada di angka 3 dan kemudian drop kembali sampai akhir sedangkan untuk yang churn semakin banyak benefits maka semakin rendah frekuensinya.\n\n#mengubah binary column menjadi numerik agar bisa diproses di correlation dan pairplot.\ndfcorr = df.copy()\nbinary = ['gender','SeniorCitizen','Partner','Dependents','PhoneService','PaperlessBilling','Churn']\nvalue_mapping = {\n    'No': 0,\n    'Yes' : 1,\n    'Male' : 1,\n    'Female' : 0\n}\n\nfor col in binary:\n    dfcorr[col] = dfcorr[col].map(value_mapping).astype('int64')\n\n\nplt.figure(figsize=(10,8))\nsns.heatmap(dfcorr.corr(),annot=True, fmt='.2f')\nplt.show()\n\nC:\\Users\\verti\\AppData\\Local\\Temp\\ipykernel_29428\\779361340.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  sns.heatmap(dfcorr.corr(),annot=True, fmt='.2f')\n\n\n\n\n\n\n1.TotalBenefits dan TotalCharges memiliki korelasi yang cukup kuat di angka 0.75. 2.MonthlyCharges memiliki korelasi yang cukup kuat dengan TotalBenefits dan TotalCharges. 3.PaperlessBilling memiliki korelasi sedang dengan MonthlyCharges. 4.PhoneService memiliki korelasi rendah dengan MonthlyCharges. 5.tenure memiliki korelasi rendah terhadap MonthlyCharges, korelasi sedang terhadap Churn dan TotalBenefits dan korelasi tinggi terhadap TotalCharges. 6.Partner memiliki korelasi sedang terhadap TotalCharges, tenure dan Dependents. 7.Tenure dan churn memiliki korelasi negatif yang sedang, dimana semakin tinggi tenure maka semakin kecil kemungkinan customers untuk churn. 8.Tenure dan totalbenefits memiliki korelasi sedang. Perlu diingat bahwa korelasi tidak sama dengan kausasi (saling berpengaruh). Walaupun hubungan korelasi tinggi namun bukan berarti bahwa kedua hal tersebut saling berpengaruh. Contoh korelasi antara TotalCharges dan TotalBenefits cukup tinggi yaitu diangka 0.75. Namun sebenarnya TotalBenefits tidak secara langsung mempengaruhi TotalCharges, melainkan tenure & MonthlyCharges lah yang mempengaruhi. Contoh kedua yaitu correlation antara PaperlessBilling dan Monthlycharges yaitu sebesar 0.35, padahal sebenarnya kedua hal ini sama sekali tidak berpengaruh, hanya saja customers yang mengambil produk MonthlyCharges yang tinggi lebih cenderung juga memilih PaperlessBilling. Tetapi bukan karena PaperlessBilling mempengaruhi MonthlyCharges(cmiiw).\n\n\n#sns.pairplot(dfcorr, hue='Churn')\n#plt.show()\n\n\nAda beberapa hubungan kolom yang menarik yang akan saya bahas di deep dive EDA."
  },
  {
    "objectID": "posts/post-with-code/final.html#deep-dive-exploratory-data-analysis",
    "href": "posts/post-with-code/final.html#deep-dive-exploratory-data-analysis",
    "title": "Table Of Contents",
    "section": "Deep-Dive Exploratory Data Analysis",
    "text": "Deep-Dive Exploratory Data Analysis\n\n\n#create a function to plot probability.\ndef prob_plot(df,colom,x):\n    means = df[colom].mean()\n    medians = df[colom].median()\n    data = df[df.Churn == 'Yes'][colom].astype('float64')\n    data1 = df[df.Churn == 'No'][colom].astype('float64')\n    \n    kde = gaussian_kde(data)\n    kde1 = gaussian_kde(data1)\n    dist_space = np.linspace( min(data), max(data), 200)\n    dist_space1 = np.linspace( min(data1), max(data1), 200)\n    axarr[x].plot( dist_space, kde(dist_space), label='Churned', color='orange' )\n    axarr[x].plot( dist_space1, kde1(dist_space1), label='Not churn', color='blue')\n    axarr[x].axvline(x = means, linestyle = '--', color='g', label='Mean')\n    axarr[x].axvline(x = medians, linestyle = '--', color='r', label='Median')\n    axarr[x].set_title('Probability', fontweight='bold', size=12)\n    axarr[x].set(ylabel = 'Probability', xlabel = colom)\n    axarr[x].legend()\n\n\nServices & Internet service analysis\n\nfig, axarr = plt.subplots(1,2, figsize=(10, 4))\nsns.countplot(df[df.Services == 'Both'], x = 'InternetService', ax=axarr[0])\nsns.countplot(df[df.Services == 'Internet Only'], x = 'InternetService', ax=axarr[1])\naxarr[0].set_title(\"Both phone service & internet service\", weight='bold')\naxarr[1].set_title(\"Internet service only\", weight='bold')\nplt.suptitle(\"Comparison of internet services on product services\")\nplt.tight_layout(pad=1)\n\n\n\n\n\nQ1. Internet service apa yang paling diminati oleh customer yang mengambil kedua paket phone + internet sekaligus dengan paket internet only? Ans. Internet service yang paling diminati pada paket phone + internet adalah fiber optic sedangkan untuk internet only, internet service yang tersedia hanya DSL. Mungkin untuk menggunakan internet fiber optic juga diperlukan sambungan telepon sedangkan untuk DSL tidak harus.\n\n\nfig, axarr = plt.subplots(1,2, figsize=(8, 4))\ndf.groupby('Services')['Churn'].agg(lambda x: list(x).count('Yes') * 100 / len(list(x))).plot(kind='bar', width=0.3,rot=True, ax=axarr[0])\ndf[df.Services != 'Phone Only'].groupby(['InternetService'])['Churn'].agg(lambda x: list(x).count('Yes') * 100 / len(x)).plot(kind='bar', width=0.3,rot=True, ax=axarr[1])\naxarr[0].set_title('Services churn probability', weight='bold')\naxarr[1].set_title('Internet service churn probability', weight='bold')\nplt.tight_layout(pad=1)\nplt.savefig('services.png',dpi=600, transparent=True)\n\n\n\n\n\nQ2. Bagaimana probabilitas churn antar services dan internet service?? jelaskan! Ans. Untuk services, pengguna kedua internet + phone sekaligus adalah yang tertinggi yaitu lebih dari 30% sedangkan yang terendah adalah phone only dimana hanya sekitar 7% yang artinya produk phone dari perusahaan ini sudah sangat bagus. Untuk internet service, walaupun mayoritas memilih fiber optic namun probabilitas churnnya merupakan yang tertinggi yaitu sekitar 40% lebih, dimana DSL hanya 18%.\n\n\ndf[df.Services != 'Phone Only'].groupby('InternetService')['TotalBenefits'].mean()\n\nInternetService\nDSL            2.656704\nFiber optic    2.556527\nName: TotalBenefits, dtype: float64\n\n\n\nQ3. Apakah jenis internet service yang digunakan mempengaruhi jumlah benefits yang diambil? Ans. Tidak, bisa dilihat bahwa rata-rata benefits antara customers fiber optic dan DSL cukup sama yaitu sekitar 2 - 3 benefits.\n\n\n\nMonthly Charges Analysis\n\ndfpure = df[(df.Services == 'Both') & (df.TotalBenefits == 0) & (df.MultipleLines == 'No')].copy()\n(dfpure.groupby('InternetService')['MonthlyCharges'].mean() - 20).plot(kind='bar' ,rot = 0)\nplt.tight_layout(pad=1)\nplt.title(\"DSL & Fiber optic price\", weight='bold')\nplt.tight_layout()\nplt.savefig('services2.png',dpi=600, transparent=True)\n\n\n\n\n\nQ4. Berapa perbedaan MonthlyCharges antara DSL dan Fiber optic? Ans. Setelah melakukan analisa dengan mengubah berbagai parameter, didapat bahwa Fiber optic lebih mahal sekitar 25 - 30 USD.\n\n\ndfpure = df[(df.Services == 'Phone Only') & (df.TotalBenefits == 0)].copy()\ndfpure.groupby('MultipleLines')['MonthlyCharges'].mean()\n\nMultipleLines\nNo     19.957316\nYes    24.977812\nName: MonthlyCharges, dtype: float64\n\n\n\nsns.histplot(data=dfpure, x = 'MonthlyCharges',hue='MultipleLines', multiple='stack')\nplt.title('Phone service distribution', weight='bold')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\nQ5. Berapakah produk phone service dengan multipleline dan yang tidak? Ans. Harga phone service tanpa multipleline adalah sekitar 20 USD dan sekitar 25 USD jika memakai multipleline.\n\n\nfig, axarr = plt.subplots(1,2, figsize=(14, 6))\ng = sns.histplot(data=df, x = 'MonthlyCharges',hue='Churn', ax=axarr[0], multiple='stack')\naxarr[0].set_title('Distribution', fontweight='bold', size=12)\n#axarr[0].axvline(x = 30, linestyle = '--', color='black')\n#axarr[0].axvline(x = 69, linestyle = '--', color='black')\n#axarr[0].axvline(x = 19, linestyle = '--', color='black')\n#axarr[0].axvline(x = 119, linestyle = '--', color='black')\n#axarr[0].fill_between((30 , 69),1200, alpha=0.15, color='green')\n#axarr[0].fill_between((19 , 30),1200, alpha=0.15, color='magenta')\n#axarr[0].fill_between((69 , 119),1200, alpha=0.15, color='orange')\nprob_plot(df[df.MonthlyCharges &gt;= 30],'MonthlyCharges',1)\naxarr[1].legend(loc='upper right')\nplt.show()\n\n\n\n\n\nQ6. Buat segmentasi pemakaian produk terhadap MonthlyCharges dan buat plot probabilitas churnya! Ans. Penjelasan warna area: 1.Untuk warna magenta : 92% pengguna phone only dan 8% pengguna internet only (DSL). 2.Untuk warna hijau : 67% pengguna both internet & phone service (91% DSL, 9% Fiber optic) dan 33% pengguna internet only (DSL). 3.Untuk warna orange : 100% pengguna both internet & phone service (83% pengguna fiber optic, 17% pengguna DSL). Pada plot ini bisa dilihat bahwa MonthlyCharges ter-rendah merupakan produk phone service tanpa internet. Kedua, mayoritas pengguna DSL berada pada rentan 30 - 70 USD dan fiber optic diatas 70 USD. Ketiga, melihat probability plot yang dikanan bahwa kenaikan churned probability jauh lebih tinggi dari not churn pada monthly charges +-60 - 90 USD… ini artinya terdapat kenaikan volume dari customers pada range harga ini namun kenaikan customers yang churned jauh lebih banyak secara rasio dari pada yang not churn.\n\n\ndfpure = df[(df.InternetService == 'Fiber optic') & (df.Services == 'Both') & (df.MultipleLines == 'No')]\ndfpureagg = dfpure.groupby('TotalBenefits')['MonthlyCharges'].agg('mean').reset_index()\ndfpureagg['MonthlyCharges'] = dfpureagg.MonthlyCharges.round()\n\n\nfig, axarr = plt.subplots(1,2, figsize=(10, 4))\nsns.scatterplot(data=dfpure, x = 'MonthlyCharges', y = 'TotalBenefits', s=35, ax=axarr[0])\nsns.barplot(dfpureagg, x = 'TotalBenefits', y = 'MonthlyCharges')\naxarr[0].set_title('MonthlyCharges vs Totalbenefits', weight='bold')\naxarr[1].set_title('Average MonthlyCharges vs Totalbenefits', weight='bold')\nfig.tight_layout(pad = 1)\nplt.show()\n\n\n\n\n\nQ7. Jelaskan hubungan antara TotalBenefits dengan MonthlyCharges!  Ans. Bisa dilihat dari kedua plots diatas bahwasannya semakin banyak benefits yang diambil maka semakin mahal juga MonthlyChargesnya. Kenaikan setiap MonthlyCharges per benefit juga terlihat cukup equal yaitu sekitar 7 dollar setiap penambahan 1 benefits. FYI, jika kita memperhatikan pada plot sebelah kiri, terlihat bahwa ‘spread’ atau penyebaran nilai dari MonthlyCharges disetiap benefit cukup beragam, padahal kolom-kolom yang mempengaruhi nilai MonthlyCharges sudah difilter. Ini berarti masih ada variabel lain yang mempengaruhi nilai MonthlyCharges.\n\n\ndfpure = df[(df.InternetService == 'Fiber optic') & (df.Services == 'Both') & (df.MultipleLines == 'No') & (df.TotalBenefits == 1)]\nbenefits = ['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\ndfnew = pd.DataFrame()\nfor x in benefits:\n    a = pd.DataFrame([x, dfpure[dfpure[x] == 'Yes']['MonthlyCharges'].min(), dfpure[dfpure[x] == 'Yes']['MonthlyCharges'].max(), dfpure[dfpure[x] == 'Yes']['MonthlyCharges'].mean(), dfpure[dfpure[x] == 'Yes']['MonthlyCharges'].median()]).transpose()\n    dfnew = pd.concat([dfnew, a])\ndfnew.columns = ['Benefit','MinCharges','MaxCharges','MeanCharges','MedianCharges']    \n\n\ndfnew\n\n\n\n\n\n\n\n\nBenefit\nMinCharges\nMaxCharges\nMeanCharges\nMedianCharges\n\n\n\n\n0\nOnlineSecurity\n73.2\n80.3\n74.965278\n75.0\n\n\n0\nOnlineBackup\n72.75\n76.65\n74.675556\n74.65\n\n\n0\nDeviceProtection\n68.95\n76.65\n74.213333\n74.8\n\n\n0\nTechSupport\n73.85\n76.55\n75.045455\n74.7\n\n\n0\nStreamingTV\n77.65\n81.9\n79.728906\n79.725\n\n\n0\nStreamingMovies\n12.0\n86.45\n79.078226\n80.075\n\n\n\n\n\n\n\n\nQ8. Bagaimana perbandingan harga antara benefit? benefit manakah yang paling mahal? Ans. Bisa dilihat bahwa benefit dari OnlineSecurity sampai TechSupport harganya cukup sama sedangkan benefit StreamingTV dan StreamingMovies memiliki harga yang lebih tinggi dari yang lain yaitu sekitar 4 - 5 USD lebih tinggi. Data harga diatas termasuk harga fiber optic dan phone service tanpa multiplelines, jika ingin mengetahui harga per benefit maka tinggal dikurangi 70 USD saja.\n\n\n\nAnomaly detection\nDari analisa EDA diatas kita bisa melakukan pengecekan terhadap nilai MonthlyCharges, apakah terdapat nilai yang tidak sesuai?\n\ndef monthlychargesdiff(x):\n    estimation = 0\n    if x['PhoneService'] == 'Yes':\n        estimation += 20\n    if x['MultipleLines'] == 'Yes':\n        estimation += 5\n    if x['InternetService'] == 'DSL':\n        estimation += 25\n    if x['InternetService'] == 'Fiber optic':\n        estimation += 50\n        \n    if (x['StreamingTV'] == 'Yes') & (x['StreamingMovies'] == 'Yes'):\n        estimation += 20 + (x['TotalBenefits'] - 2) * 5\n    elif (x['StreamingTV'] == 'Yes') | (x['StreamingMovies'] == 'Yes'):\n        estimation += 10 + (x['TotalBenefits'] - 1) * 5\n    else:\n        estimation += x['TotalBenefits'] * 5\n        \n    return abs(1 - (estimation / x['MonthlyCharges'])) * 100\n    \n   \n\n\ndf['MonthlyChargesEstimationDifference'] = df.apply(monthlychargesdiff, axis=1)\n\n\ndf[df.MonthlyChargesEstimationDifference &gt; 200]\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\nServices\nTotalBenefits\nMonthlyChargesEstimationDifference\n\n\n\n\n12\nFemale\nNo\nYes\nYes\n69\nYes\nYes\nFiber optic\nYes\nYes\n...\nYes\nTwo year\nNo\nCredit card (automatic)\n29.00\n2050.00\nNo\nBoth\n6\n296.551724\n\n\n389\nMale\nNo\nYes\nYes\n69\nYes\nYes\nFiber optic\nNo\nNo\n...\nYes\nMonth-to-month\nYes\nCredit card (automatic)\n12.00\n880.00\nYes\nBoth\n3\n733.333333\n\n\n666\nMale\nNo\nYes\nYes\n1\nYes\nNo\nFiber optic\nNo\nNo\n...\nYes\nMonth-to-month\nNo\nElectronic check\n12.00\n13.50\nYes\nBoth\n1\n566.666667\n\n\n859\nMale\nNo\nNo\nYes\n45\nYes\nYes\nFiber optic\nNo\nNo\n...\nYes\nTwo year\nNo\nBank transfer (automatic)\n26.41\n1189.00\nNo\nBoth\n3\n278.644453\n\n\n1439\nFemale\nNo\nNo\nNo\n60\nYes\nNo\nFiber optic\nNo\nYes\n...\nYes\nTwo year\nYes\nElectronic check\n18.26\n1095.60\nNo\nBoth\n4\n447.645126\n\n\n2185\nMale\nYes\nNo\nNo\n34\nYes\nNo\nFiber optic\nNo\nYes\n...\nYes\nOne year\nYes\nElectronic check\n21.63\n735.42\nNo\nBoth\n4\n362.320851\n\n\n4090\nFemale\nNo\nNo\nNo\n59\nYes\nYes\nFiber optic\nYes\nYes\n...\nYes\nMonth-to-month\nYes\nBank transfer (automatic)\n31.26\n1846.55\nNo\nBoth\n4\n219.897633\n\n\n5848\nFemale\nYes\nNo\nNo\n1\nYes\nNo\nFiber optic\nNo\nYes\n...\nYes\nMonth-to-month\nYes\nElectronic check\n15.00\n15.56\nYes\nBoth\n2\n466.666667\n\n\n6718\nFemale\nYes\nNo\nNo\n1\nYes\nNo\nFiber optic\nNo\nNo\n...\nYes\nMonth-to-month\nYes\nElectronic check\n21.00\n22.10\nYes\nBoth\n2\n304.761905\n\n\n\n\n9 rows × 23 columns\n\n\n\n\ndf = df[df.MonthlyChargesEstimationDifference &lt; 200].reset_index(drop=True)\n\nRecap – What we know so far 1.Hal yang mempengaruhi MonthlyCharges adalah services, internet service, multiplelines, totalbenefits dan jenis benefitnya. 2.Phone service yang menggunakan multiple line lebih mahal dari yang tidak (lebih mahal +- 5 USD). 3.Semua pengguna internet fiber optic pasti menggunakan phone service. 4.Pengguna fiber optic lebih banyak dari DSL, namun churn probabilitynya juga jauh lebih tinggi fiber optic dari pada DSL. 5.Fiber optic lebih mahal sekitar 25 - 30 USD dari DSL. 6.Internet service tidak berpengaruh terhadap jumlah benefits yang diambil. 7.Churn probability meningkat drastis saat MonthlyCharges mulai menyentuh 60 USD. 8.Semua benefit memiliki harga yang serupa kecuali untuk StreamingTV dan StreamingMovies dimana kedua benefit ini lebih mahal sekitar 4 - 5 USD.\n\n\nCustomer analysis\n\ndef statuss(x):\n    x = list(x)\n    if (x[0] == 'Yes') & (x[1] == 'Yes'):\n        return 'Both'\n    elif (x[0] == 'Yes') & (x[1] == 'No'):\n        return 'Partner Only'\n    elif (x[0] == 'No') & (x[1] == 'Yes'):\n        return 'Dependent Only'\n    else:\n        return 'Single'\n\n\ndf['Status'] = df[['Partner','Dependents']].apply(statuss, axis=1)\n\n\nDi atas saya membuat fitur baru bernama ‘Status’ dimana nilainya adalah: 1.Jika tidak ada partner dan dependents maka nilainya ‘Single’. 2.Jika hanya ada partner saja maka nilainya ‘Partner Only’. 3.Jika hanya ada dependent saja maka nilainya ‘Dependent Only’. 4.Jika terdapat partner dan dependent maka nilainya ‘Both’.\n\n\nsns.countplot(df.sort_values('Status', ascending=True), x='Status')\nplt.title('Status Count', size=16, weight='bold')\nplt.show()\n\n\n\n\n\nQ9. Jelaskan segmentasi customer berdasarkan status partner dan dependent! Ans. Jumlah terbanyak customer adalah yang single, disusul oleh Partner only dan both yang jumlahnya cukup berimbang dan yang terakhir dependent only.\n\n\nfig, axarr = plt.subplots(1,3, figsize=(15, 6))\nk = ['tenure','MonthlyCharges','TotalBenefits']\nfor x in k:\n    sns.barplot(df.groupby(['Status'])[[x]].mean().reset_index(), x ='Status', y =x, ax =axarr[k.index(x)],palette=['grey', 'g','m','b'])\n    axarr[k.index(x)].set_title(f'{x} average', weight='bold', size=15)\nfig.tight_layout(pad = 1)\nplt.show()\n\n\n\n\n\nQ10. Bagaimana behaviour status customer terhadap tenure, MonthlyCharges dan TotalBenefits? Bisa dilihat plots diatas, bahwa customer dengan partner only adalah merupakan customer paling bagus. Mereka adalah customer ter-loyal, mereka mengambil produk dengan monthly charges tertinggi dan mereka merupakan pengguna benefits terbanyak. Customer yang memiliki kedua partner dan dependent juga cukup bagus namun tidak sebagus yang partner only. Untuk customer single, monthly charges yang dibayar cukup tinggi namun tenure nya tidak terlalu lama.\n\n\nsns.barplot(df.groupby('Status')[['Churn']].agg(lambda x: list(x).count('Yes') / len(x)).reset_index(), x = 'Status' , y ='Churn')\nplt.title('Churn Probability', weight='bold', size=16)\nplt.tight_layout(pad=1)\nplt.show()\n\n\n\n\n\nQ11. Status customer manakah yang paling tinggi churn probabilitynya? Ans. Customer Single adalah customer yang paling tinggi churn probabilitynya yang hampir mencapai 35%, disusul oleh partner only, dependent only dan both.\n\n\ndf.SeniorCitizen.value_counts().plot(kind='pie')\nplt.show()\n\n\n\n\n\ndfnew = df.groupby('SeniorCitizen')[['Status']].agg(Single = ('Status', lambda x: list(x).count('Single') * 100 / len(x)), PartnerOnly = ('Status', lambda x: list(x).count('Partner Only') * 100  / len(x)), Both = ('Status', lambda x: list(x).count('Both') * 100  / len(x)), DependentOnly = ('Status', lambda x: list(x).count('Dependent Only') * 100  / len(x)))\n\n\ndfnew.round().plot(kind='bar',rot=0, figsize=(8,5))\nplt.title(\"Status comparison between senior citizen\", size=15, weight='bold')\nplt.show()\n\n\n\n\n\nQ12. Bagaimana perbedaan status antara SeniorCitizen dan yang tidak? Dari grafik diatas, bisa dilihat bahwa orang muda dan tua mayoritas adalah single. Untuk orang tua, jumlah partner yang dimiliki sangat tinggi namun jumlah dependentsnya sangat rendah sedangkan untuk yang lebih muda, jumlah partner dan dependent lebih seimbang.IMHO, menurut saya ini cukup logis karena memang kebanyakan orang tua yang sudah pensiun tidak memiliki tanggungan lagi, sedangkan untuk orang lebih muda dan masih bekerja, jumlah tanggungan mereka pasti akan lebih banyak.\n\n\ndfnew = df.groupby('Status')[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].agg(lambda x: list(x).count('Yes'))\ndfnew['total'] = dfnew.apply('sum',axis=1)\nfor x in dfnew.drop(columns='total').columns:\n    dfnew[x] = (dfnew[x] * 100 / dfnew.total).round()\ndfnew.drop(columns='total', inplace=True)\n\n\ndfnew.plot(kind='bar', rot=0)\nplt.title('Benefit count comparison between status (%)', size=12, weight='bold')\nplt.legend(bbox_to_anchor=(1, 1))\nplt.show()\n\n\n\n\n\nQ13. Analisa benefit yang diambil di setiap segmen customer! Berdasarkan plot diatas, customer single dan partner only mayoritas memilih benefit hiburan yaitu streaming tv dan streaming movies disusul oleh online backup dan device protection tetapi untuk tech support dan online security terlihat tidak terlalu diminati. Untuk customer dependent, benefit yang terpenting adalah online security dan online backup sedangkan yang terendah adalah device protection. Untuk customer both terlihat bahwa semua nilai benefit tidak berbeda begitu jauh satu sama lain atau nilainya cukup equal. Kesimpulan : customer tanpa dependent terlihat lebih mementingkan benefit hiburan sedangkan yang memiliki dependent terlihat lebih mementingkan keamanan. Terakhir benefit online backup juga cukup penting disemua kalangan customer.\n\n\n\nBenefits analysis\n\nfig, axarr = plt.subplots(1,2, figsize=(12, 6))\nsns.countplot(df[df.Services != 'Phone Only'], x = 'TotalBenefits', ax=axarr[0])\nsns.barplot(df[['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']].apply(lambda x: list(x).count('Yes')).reset_index(), x = 'index', y = 0, ax=axarr[1])\naxarr[0].set_title('TotalBenefits Count', size=12, weight='bold')\naxarr[0].set(ylabel=None)\naxarr[1].set(ylabel=None)\naxarr[1].set_title('Benefits Count', size=12, weight='bold')\naxarr[1].tick_params(axis='x', rotation=25)\nfig.tight_layout(pad=1)\nplt.show()\n\n\n\n\n\nQ14. Berapa TotalBenefits terbanyak dan benefit apa saja yang paling banyak dipilih oleh customer? Terlihat bahwa rata2 customer kebanyakan mengambil 3 benefits. Untuk benefit terfavorit ada pada sesi entertain yaitu StreamingTV dan StreamingMovies. FYI, untuk TotalBenefits saat kita melakukan standard EDA yang tertinggi adalah 0 benefits dikarenakan produk ‘Phone Only’ semuanya terhitung 0 benefits. Analisa Totalbenefits yang benar adalah kita mengexclude ‘Phone Only’ karena benefit hanya bisa diambil jika memiliki koneksi internet.\n\n\ndfnew = pd.DataFrame()\nfor x in ['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']:\n    a = list(df[df[x] == 'Yes']['Churn']).count('Yes') / len(df[df[x] == 'Yes']['Churn'])\n    dfnew = pd.concat([dfnew, pd.DataFrame([x],[a])])\n\n\nfig, axarr = plt.subplots(1,2, figsize=(12, 6))\nsns.barplot(df.groupby('TotalBenefits')[['Churn']].agg(lambda x: list(x).count('Yes') * 100 / len(x)).round().reset_index(), x = 'TotalBenefits', y = 'Churn', ax=axarr[0])\nsns.barplot(dfnew.reset_index(), x = 0, y = 'index', ax=axarr[1])\naxarr[0].set_title('TotalBenefits Churn probability', size=12, weight='bold')\naxarr[0].set(ylabel=None)\naxarr[1].set(ylabel=None, xlabel='Benefits')\naxarr[1].set_title('Benefits Churn probability', size=12, weight='bold')\naxarr[1].tick_params(axis='x', rotation=25)\nfig.tight_layout(pad=1)\n\n\n\n\n\nQ15. Plot dan jelaskan churn probability untuk TotalBenefits dan benefits! Totalbenefit dengan kemungkinan churn tertinggi ada pada 1 benefit. Walaupun benefit streamingTV dan streamingMovies merupakan benefit yang paling diminati namun secara rasio, kedua benefit ini malah yang memiliki kemungkinan churn tertinggi.\n\n\n\nChurn analysis\n\nQ16. Temukan dan jelaskan pattern perilaku customer yang churn dan tidak!\n\n\nPada tahap ini, saya akan menganalisa pattern behaviour customer yang churn dan tidak. Namun, saya perlu memplot 5 dimensi features dalam 1 scatter plot. Tentu hal ini akan sangat membingungkan dan saya akan membagi menjadi 2 scatter plot saja. First, saya akan membuat scatter plot tenure vs MonthlyCharges vs churn. Kedua, saya akan membuat scatter plot tenure vs MonthlyCharges vs TotalBenefits vs InternetService.\n\n\nfig, axarr = plt.subplots(1, figsize=(12, 8))\nsns.scatterplot(data=df, x = 'MonthlyCharges', y = 'tenure', hue ='Churn', s=35)\nplt.fill_between((68 , 97),20, alpha=0.2, color='green')\nplt.fill_between((68 , 97),52.5, 72.5, alpha=0.2, color='blue')\nplt.title('MonthlyCharges vs tenure vs Churn', size = 15, weight = 'bold')\nplt.show()\n\n\n\n\n\nBerdasarkan hasil analisa sebelumnya, didapat bahwa mayoritas customer ada pada range MonthlyCharges sekitar 60 dollar sampai dengan sekitar 100 dollar. Pada range harga ini saya menemukan sebuah pattern yang cukup jelas yaitu pada area hijau terlihat bahwa banyak customer churn berkumpul pada area ini, sedangkan pada range harga yang sama pada area biru terlihat bahwa justru customer tidak churn yang mendominasi. Pada area hijau nilai tenurenya cukup rendah yaitu hanya 0 - 20 bulan saja (new customers), sedangkan pada area biru nilai tenurenya sudah tinggi (loyal customers).\n\n\nplt.subplots(1, figsize=(15, 8))\nsns.scatterplot(data=df, x = 'MonthlyCharges', y = 'tenure', s=35, hue='TotalBenefits', style='InternetService', palette='coolwarm')\nplt.fill_between((68 , 97),20, alpha=0.15, color='green')\nplt.fill_between((68 , 97),52.5, 72.5, alpha=0.15, color='blue')\nplt.title('MonthlyCharges vs tenure vs TotalBenefits vs InternetService', size = 15, weight = 'bold')\nplt.show()\n\n\n\n\n\nMasih pada area chart yang sama, saya merombak sedikit features pada scatterplot ini. Saya mengganti feature Churn menjadi TotalBenefits dan InternetService. Bisa dilihat secara jelas bahwa pada area chart hijau, mayoritas internet service yang digunakan adalah fiber optic namun totalbenefits yang diambil sedikit sedangkan pada area chart biru mayoritas menggunakan internet service DSL namun totalbenefitsnya lebih banyak. Pada range harga ini, customers hanya dihadapkan oleh 2 pilihan yaitu menggunakan internet fiber optic yang lebih mahal dari DSL tetapi imbasnya totalbenefits yang bisa dipilih lebih sedikit atau menggunakan internet DSL yang murah namun totalbenefits yang diambil bisa lebih banyak. Dan ternyata customers lebih memilih internet service DSL yang lebih murah namun dengan totalbenefits yang lebih banyak. Kemungkinan hal ini bisa terjadi karena perbedaan harga antara fiber optic dan dsl tidak setara dengan perbedaan keuntungannya yang membuat fiber optic menjadi tidak worth it."
  },
  {
    "objectID": "posts/post-with-code/final.html#modelling",
    "href": "posts/post-with-code/final.html#modelling",
    "title": "Table Of Contents",
    "section": "Modelling",
    "text": "Modelling\n\n\nFeature selection & encoding\n\ndf\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\nServices\nTotalBenefits\nMonthlyChargesEstimationDifference\nStatus\n\n\n\n\n0\nMale\nNo\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\n...\nOne year\nNo\nMailed check\n56.95\n1889.50\nNo\nBoth\n2\n3.424056\nSingle\n\n\n1\nFemale\nNo\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\nNo\n...\nMonth-to-month\nYes\nElectronic check\n70.70\n151.65\nYes\nBoth\n0\n0.990099\nSingle\n\n\n2\nMale\nNo\nNo\nYes\n22\nYes\nYes\nFiber optic\nNo\nYes\n...\nMonth-to-month\nYes\nCredit card (automatic)\n89.10\n1949.40\nNo\nBoth\n2\n1.010101\nDependent Only\n\n\n3\nFemale\nNo\nNo\nNo\n10\nNo\nNo phone service\nDSL\nYes\nNo\n...\nMonth-to-month\nNo\nMailed check\n29.75\n301.90\nNo\nInternet Only\n1\n0.840336\nSingle\n\n\n4\nFemale\nNo\nYes\nNo\n28\nYes\nYes\nFiber optic\nNo\nNo\n...\nMonth-to-month\nYes\nElectronic check\n104.80\n3046.05\nYes\nBoth\n4\n0.190840\nPartner Only\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6997\nMale\nNo\nYes\nYes\n24\nYes\nYes\nDSL\nYes\nNo\n...\nOne year\nYes\nMailed check\n84.80\n1990.50\nNo\nBoth\n5\n0.235849\nBoth\n\n\n6998\nFemale\nNo\nYes\nYes\n72\nYes\nYes\nFiber optic\nNo\nYes\n...\nOne year\nYes\nCredit card (automatic)\n103.20\n7362.90\nNo\nBoth\n4\n1.744186\nBoth\n\n\n6999\nFemale\nNo\nYes\nYes\n11\nNo\nNo phone service\nDSL\nYes\nNo\n...\nMonth-to-month\nYes\nElectronic check\n29.60\n346.45\nNo\nInternet Only\n1\n1.351351\nBoth\n\n\n7000\nMale\nYes\nYes\nNo\n4\nYes\nYes\nFiber optic\nNo\nNo\n...\nMonth-to-month\nYes\nMailed check\n74.40\n306.60\nYes\nBoth\n0\n0.806452\nPartner Only\n\n\n7001\nMale\nNo\nNo\nNo\n66\nYes\nNo\nFiber optic\nYes\nNo\n...\nTwo year\nYes\nBank transfer (automatic)\n105.65\n6844.50\nNo\nBoth\n5\n0.615239\nSingle\n\n\n\n\n7002 rows × 24 columns\n\n\n\n\ndf.drop(columns = ['Services','MonthlyChargesEstimationDifference','Status','PaperlessBilling','PaymentMethod'], inplace=True)\n\n\nKolomBenefit = ['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\n\nfor x in KolomBenefit:\n    df[x] = df[x].apply(lambda x: 'No' if x == 'No internet service' else x)\n\n\ndf['MultipleLines'] = df[x].apply(lambda x: 'No' if x == 'No phone service' else x)\n\n\nvalue_mapping = {\n    'No': 0,\n    'Yes' : 1,\n    'Male' : 1,\n    'Female' : 0\n}\n\n\nbinary = list(df.drop(columns=['tenure','InternetService','MonthlyCharges','TotalCharges','TotalBenefits','Contract']).columns)\n\nfor col in binary:\n    df[col] = df[col].map(value_mapping).astype('int64')\n\n\ndf['Contract'] = df['Contract'].apply(lambda x: 1 if x == 'Month-to-month' else 2 if x == 'One year' else 3)\n\n\ndf['is_cheap'] = df.apply(lambda x: 1 if (x['InternetService'] == 'Fiber optic') & (x['TotalBenefits'] &lt; 3) else 0, axis = 1)\n\n\ndf = pd.get_dummies(df, columns=['InternetService'])\n\n\ndf = df[['Contract','tenure','InternetService_Fiber optic','MonthlyCharges','InternetService_No','Churn']]\n\n\n\nSplits data and define custom function\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn import metrics\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import confusion_matrix\n\n\nX_train, X_test, y_train, y_test = train_test_split(df.drop(columns='Churn'), df.Churn.to_numpy(), test_size = 0.2, random_state=123)\nX_train = X_train.reset_index(drop=True)\nX_test = X_test.reset_index(drop=True)\n\n\ndef my_scorer_2(clf, X, y_true, thres = np.arange(0.1,1,0.1)):\n    result_dict = {}\n    for threshold in np.atleast_1d(thres):\n        y_pred = (clf.predict_proba(X)[:,1] &gt; threshold).astype(int)\n        X_segment = (X['MonthlyCharges'] &gt; 95).to_numpy().astype(int)\n        y_stack = np.column_stack((X_segment, y_pred, y_true))\n        y_stack_reg, y_stack_vip = y_stack[y_stack[:,0] == 0], y_stack[y_stack[:,0] == 1]\n        cm_reg = confusion_matrix(y_stack_reg[:,2], y_stack_reg[:,1])\n        cm_vip = confusion_matrix(y_stack_vip[:,2], y_stack_vip[:,1])\n        fn_reg, fn_vip = cm_reg[1][0], cm_vip[1][0]\n        fp = cm_reg[0][1] + cm_vip[0][1]\n        loss_score = (fp * 1) + (fn_reg * 3) + (fn_vip * 5)\n        result_dict[threshold] = np.array([loss_score, metrics.precision_score(y_true, y_pred, zero_division = 0), \n                                           metrics.recall_score(y_true, y_pred), metrics.f1_score(y_true, y_pred)])\n        \n    result_np = np.array([np.insert(value, 0, key) for key, value in result_dict.items()])\n    best_np = result_np[result_np[:,1] == np.min(result_np[:,1])][0]\n    return best_np\n\ndef my_scorer_threshold(clf, X, y_true):\n    return my_scorer_2(clf, X, y_true)[0]\n\ndef my_scorer_ls(clf, X, y_true):\n    return my_scorer_2(clf, X, y_true)[1]\n\ndef my_scorer_precision(clf, X, y_true):\n    return my_scorer_2(clf, X, y_true)[2]\n\ndef my_scorer_recall(clf, X, y_true):\n    return my_scorer_2(clf, X, y_true)[3]\n\ndef my_scorer_f1(clf, X, y_true):\n    return my_scorer_2(clf, X, y_true)[4]\n        \n        \n\n\ngrid_scoring = {\n    'threshold': my_scorer_threshold,\n    'loss_score': my_scorer_ls,\n    'precision': my_scorer_precision,\n    'recall': my_scorer_recall,\n    'f1': my_scorer_f1\n}\n\n\nX_segment = (X_train['MonthlyCharges'] &gt; 95).to_numpy().astype(int)\narr_weight = np.column_stack((X_segment, y_train))\nweight = np.apply_along_axis(lambda x: 1 if x[1] == 0 else 5 if x[0] == 1 else 3 , axis=1, arr=arr_weight)\n\n\n\nModel building 1 / Hyperparameter tuning + threshold tuning\n\n#RANDOM FOREST MODELLING\n\n#define parameter for tuning\nparam_grid_rf = {\n    'n_estimators': [250 , 400],\n    'max_depth': [10, 25, 50],\n    'min_samples_split': [25, 50, 70, 120],\n    'min_samples_leaf': [50, 75, 120],\n    'bootstrap' : [True, False]\n}\n\n#run grid search cv\nrf = GridSearchCV(estimator = RandomForestClassifier(),\n                  param_grid = param_grid_rf,\n                  cv=5,\n                  scoring = grid_scoring, refit=False, n_jobs = -1)\n\n#fit grid search cv with train data\nrf.fit(X_train, y_train)\n\n#selecting the best parameter and metrics\ngrid_result = pd.DataFrame(rf.cv_results_)\ngrid_result = grid_result[grid_result['mean_test_loss_score'] == grid_result['mean_test_loss_score'].min()][['params','mean_test_threshold','mean_test_loss_score','mean_test_precision','mean_test_recall','mean_test_f1']]\n\n#train model with the best hyperparameter\nrf = RandomForestClassifier(**grid_result.iloc[0,0])\n\n#train model with train data\nrf = rf.fit(X_train, y_train)\n\n#evaluate the model\nmb1_rf = my_scorer_2(rf, X_test, y_test, grid_result.iloc[0,1])\n\n\nprint(b)\n\nNameError: name 'b' is not defined\n\n\n\n#XGBOOST MODELLING\n\n#define parameter for tuning\nparam_grid_xg = {\n    'learning_rate': [0.1, 0.01, 0.001],\n    'n_estimators': [100, 500],\n    'max_depth': [5, 10, 25],\n    'subsample': [0.8, 0.9, 1.0],\n    'colsample_bytree': [0.8, 0.9, 1.0]\n}\n\n#run grid search cv\nxg = GridSearchCV(estimator = XGBClassifier(),\n                  param_grid = param_grid_xg,\n                  cv=5,\n                  scoring = grid_scoring, refit=False, n_jobs = -1)\n\n#fit grid search cv with train data\nxg.fit(X_train, y_train)\n\n#selecting the best parameter and metrics\ngrid_result = pd.DataFrame(xg.cv_results_)\ngrid_result = grid_result[grid_result['mean_test_loss_score'] == grid_result['mean_test_loss_score'].min()][['params','mean_test_threshold','mean_test_loss_score','mean_test_precision','mean_test_recall','mean_test_f1']]\n\n#train model with the best hyperparameter\nxg = XGBClassifier(**grid_result.iloc[0,0])\n\n#train model with train data\nxg = xg.fit(X_train, y_train)\n\n#evaluate the model\nmb1_xg = my_scorer_2(xg, X_test, y_test, grid_result.iloc[0,1])\n\n\n#LOGISTIC REGRESSION MODELLING\n\n#define parameter for tuning\nparam_grid_lg = {\n    'penalty': ['l1', 'l2'], \n    'C': [0.1, 1.0, 10.0],  \n    'solver': ['liblinear'],  \n    'max_iter': [50,100,200] \n}\n\n#run grid search cv\nlg = GridSearchCV(estimator = LogisticRegression(),\n                  param_grid = param_grid_lg,\n                  cv=5,\n                  scoring = grid_scoring, refit=False, n_jobs = -1)\n\n#fit grid search cv with train data\nlg.fit(X_train, y_train)\n\n#selecting the best parameter and metrics\ngrid_result = pd.DataFrame(lg.cv_results_)\ngrid_result = grid_result[grid_result['mean_test_loss_score'] == grid_result['mean_test_loss_score'].min()][['params','mean_test_threshold','mean_test_loss_score','mean_test_precision','mean_test_recall','mean_test_f1']]\n\n#train model with the best hyperparameter\nlg = LogisticRegression(**grid_result.iloc[0,0])\n\n#train model with train data\nlg = lg.fit(X_train, y_train)\n\n#evaluate the model\nmb1_lg = my_scorer_2(lg, X_test, y_test, grid_result.iloc[0,1])\n\n\nresult_mb1 = pd.DataFrame([mb1_rf,mb1_xg,mb1_lg])\nresult_mb1\n\n\n\nModel building 2 / Hyperparameter tuning + threshold tuning + SMOTE\n\n#RANDOM FOREST MODELLING\n\n#define parameter for tuning\nparam_grid_rf_smote = {\n    'class__n_estimators': [250 , 400],\n    'class__max_depth': [10, 25, 50],\n    'class__min_samples_split': [25, 50, 70, 120],\n    'class__min_samples_leaf': [50, 75, 120],\n    'class__bootstrap' : [True, False]\n}\n\n#create imbalanced pipeline to SMOTE \npipelinerf = Pipeline([\n        ('sampling', SMOTE()),\n        ('class', RandomForestClassifier())])\n\n#run grid search cv\nrf = GridSearchCV(estimator = pipelinerf,\n                  param_grid = param_grid_rf_smote,\n                  cv=5,\n                  scoring = grid_scoring, refit=False, n_jobs = -1)\n\n#fit grid search cv with train data\nrf.fit(X_train, y_train)\n\n#selecting the best parameter and metrics\ngrid_result = pd.DataFrame(rf.cv_results_)\ngrid_result = grid_result[grid_result['mean_test_loss_score'] == grid_result['mean_test_loss_score'].min()][['params','mean_test_threshold','mean_test_loss_score','mean_test_precision','mean_test_recall','mean_test_f1']]\nparams = grid_result.iloc[0,0]\n\nparams_update = {}\nfor key, value in params.items():\n    new_key = key.replace('class__', '')\n    params_update[new_key] = value\nparams = params_update\n    \n#train model with the best hyperparameter\nrf = RandomForestClassifier(**params)\n\n#train model with SMOTE train data\nX_train1, y_train1 = SMOTE().fit_resample(X_train, y_train)\nrf = rf.fit(X_train1, y_train1)\n\n#evaluate the model\nmb2_rf = my_scorer_2(rf, X_test, y_test, grid_result.iloc[0,1])\n\n\n#XGBOOST MODELLING\n\n#define parameter for tuning\nparam_grid_xg_smote = {\n    'class__learning_rate': [0.1, 0.01, 0.001],\n    'class__n_estimators': [100, 500],\n    'class__max_depth': [5, 10, 25],\n    'class__subsample': [0.8, 0.9, 1.0],\n    'class__colsample_bytree': [0.8, 0.9, 1.0]\n}\n\n#create imbalanced pipeline to SMOTE \npipelinexg = Pipeline([\n        ('sampling', SMOTE()),\n        ('class', XGBClassifier())])\n\n#run grid search cv\nxg = GridSearchCV(estimator = pipelinexg,\n                  param_grid = param_grid_xg_smote,\n                  cv=5,\n                  scoring = grid_scoring, refit=False, n_jobs = -1)\n\n#fit grid search cv with train data\nxg.fit(X_train, y_train)\n\n#selecting the best parameter and metrics\ngrid_result = pd.DataFrame(xg.cv_results_)\ngrid_result = grid_result[grid_result['mean_test_loss_score'] == grid_result['mean_test_loss_score'].min()][['params','mean_test_threshold','mean_test_loss_score','mean_test_precision','mean_test_recall','mean_test_f1']]\nparams = grid_result.iloc[0,0]\n\nparams_update = {}\nfor key, value in params.items():\n    new_key = key.replace('class__', '')\n    params_update[new_key] = value\nparams = params_update\n    \n#train model with the best hyperparameter\nxg = XGBClassifier(**params)\n\n#train model with SMOTE train data\nX_train1, y_train1 = SMOTE().fit_resample(X_train, y_train)\nxg = xg.fit(X_train1, y_train1)\n\n#evaluate the model\nmb2_xg = my_scorer_2(xg, X_test, y_test, grid_result.iloc[0,1])\n\n\n#LOGISTIC REGRESSION MODELLING\n\n#define parameter for tuning\nparam_grid_lg_smote = {\n    'class__penalty': ['l1', 'l2'], \n    'class__C': [0.1, 1.0, 10.0],  \n    'class__solver': ['liblinear'],  \n    'class__max_iter': [50,100,200] \n}\n\n\n#create imbalanced pipeline to SMOTE \npipelinelg = Pipeline([\n        ('sampling', SMOTE()),\n        ('class', LogisticRegression())])\n\n#run grid search cv\nlg = GridSearchCV(estimator = pipelinelg,\n                  param_grid = param_grid_lg_smote,\n                  cv=5,\n                  scoring = grid_scoring, refit=False, n_jobs = -1)\n\n#fit grid search cv with train data\nlg.fit(X_train, y_train)\n\n#selecting the best parameter and metrics\ngrid_result = pd.DataFrame(lg.cv_results_)\ngrid_result = grid_result[grid_result['mean_test_loss_score'] == grid_result['mean_test_loss_score'].min()][['params','mean_test_threshold','mean_test_loss_score','mean_test_precision','mean_test_recall','mean_test_f1']]\nparams = grid_result.iloc[0,0]\n\nparams_update = {}\nfor key, value in params.items():\n    new_key = key.replace('class__', '')\n    params_update[new_key] = value\nparams = params_update\n    \n#train model with the best hyperparameter\nlg = LogisticRegression(**params)\n\n#train model with SMOTE train data\nX_train1, y_train1 = SMOTE().fit_resample(X_train, y_train)\nlg = lg.fit(X_train1, y_train1)\n\n#evaluate the model\nmb2_lg = my_scorer_2(lg, X_test, y_test, grid_result.iloc[0,1])\n\n\nresult_mb2 = pd.DataFrame([mb2_rf,mb2_xg,mb2_lg])\nresult_mb2\n\n\n\nModel building 3 / Hyperparameter tuning + threshold tuning + custom weight\n\n#RANDOM FOREST MODELLING\n\n#define parameter for tuning\nparam_grid_rf = {\n    'n_estimators': [250 , 400],\n    'max_depth': [10, 25, 50],\n    'min_samples_split': [25, 50, 70, 120],\n    'min_samples_leaf': [50, 75, 120],\n    'bootstrap' : [True, False]\n}\n\n#run grid search cv\nrf = GridSearchCV(estimator = RandomForestClassifier(),\n                  param_grid = param_grid_rf,\n                  cv=5,\n                  scoring = grid_scoring, refit=False, n_jobs = -1)\n\n#fit grid search cv with train data\nrf.fit(X_train, y_train, sample_weight = weight)\n\n#selecting the best parameter and metrics\ngrid_result = pd.DataFrame(rf.cv_results_)\ngrid_result = grid_result[grid_result['mean_test_loss_score'] == grid_result['mean_test_loss_score'].min()][['params','mean_test_threshold','mean_test_loss_score','mean_test_precision','mean_test_recall','mean_test_f1']]\n\n#train model with the best hyperparameter\nrf = RandomForestClassifier(**grid_result.iloc[0,0])\n\n#train model with train data\nrf = rf.fit(X_train, y_train, sample_weight = weight)\n\n#evaluate the model\nmb3_rf = my_scorer_2(rf, X_test, y_test, grid_result.iloc[0,1])\n\n\n#XGBOOST MODELLING\n\n#define parameter for tuning\nparam_grid_xg = {\n    'learning_rate': [0.1, 0.01, 0.001],\n    'n_estimators': [100, 500],\n    'max_depth': [5, 10, 25],\n    'subsample': [0.8, 0.9, 1.0],\n    'colsample_bytree': [0.8, 0.9, 1.0]\n}\n\n#run grid search cv\nxg = GridSearchCV(estimator = XGBClassifier(),\n                  param_grid = param_grid_xg,\n                  cv=5,\n                  scoring = grid_scoring, refit=False, n_jobs = -1)\n\n#fit grid search cv with train data\nxg.fit(X_train, y_train, sample_weight = weight)\n\n#selecting the best parameter and metrics\ngrid_result = pd.DataFrame(xg.cv_results_)\ngrid_result = grid_result[grid_result['mean_test_loss_score'] == grid_result['mean_test_loss_score'].min()][['params','mean_test_threshold','mean_test_loss_score','mean_test_precision','mean_test_recall','mean_test_f1']]\n\n#train model with the best hyperparameter\nxg = XGBClassifier(**grid_result.iloc[0,0])\n\n#train model with train data\nxg = xg.fit(X_train, y_train, sample_weight = weight)\n\n#evaluate the model\nmb3_xg = my_scorer_2(xg, X_test, y_test, grid_result.iloc[0,1])\n\n\n#LOGISTIC REGRESSION MODELLING\n\n#define parameter for tuning\nparam_grid_lg = {\n    'penalty': ['l1', 'l2'], \n    'C': [0.1, 1.0, 10.0],  \n    'solver': ['liblinear'],  \n    'max_iter': [50,100,200] \n}\n\n\n#run grid search cv\nlg = GridSearchCV(estimator = LogisticRegression(),\n                  param_grid = param_grid_lg,\n                  cv=5,\n                  scoring = grid_scoring, refit=False, n_jobs = -1)\n\n#fit grid search cv with train data\nlg.fit(X_train, y_train, sample_weight = weight)\n\n#selecting the best parameter and metrics\ngrid_result = pd.DataFrame(lg.cv_results_)\ngrid_result = grid_result[grid_result['mean_test_loss_score'] == grid_result['mean_test_loss_score'].min()][['params','mean_test_threshold','mean_test_loss_score','mean_test_precision','mean_test_recall','mean_test_f1']]\n\n#train model with the best hyperparameter\nlg = LogisticRegression(**grid_result.iloc[0,0])\n\n#train model with train data\nlg = lg.fit(X_train, y_train, sample_weight = weight)\n\n#evaluate the model\nmb3_lg = my_scorer_2(lg, X_test, y_test, grid_result.iloc[0,1])\n\n\nresult_mb3 = pd.DataFrame([mb3_rf,mb3_xg,mb3_lg])\nresult_mb3\n\n#—————stop——————————————-\n\nimport pandas as pd\n\n\nfrom sklearn.inspection import PartialDependenceDisplay\nfrom sklearn.inspection import partial_dependence\n\n\npdp = partial_dependence(rf, X_test, 'MonthlyCharges', kind='both')\n\n\nvalues = np.array(pdp['values'])\nvalues = values[0]\nvalues\n\n\nindividual = pdp['individual'].reshape(-1, pdp['individual'].shape[-1])\nindividual\n\n\nindividual.mean(axis=0)\n\n\nsns.lineplot(x=values, y=individual.mean(axis=0), \n             markers=True, legend=False)\nsns.lineplot(data=pd.DataFrame(individual, columns=values)\\\n                    .sample(50).reset_index().melt('index'), \n             x='variable', y='value', style='index', dashes=False, \n             legend=False, alpha=0.5, size=1, color='#63C1A4')\nplt.ylabel(\"Partial dependence\")\nplt.xlabel('MonthlyCharges');\n\n\ndf1 = pd.DataFrame(individual, columns=values).reset_index()\n\n\ndf1\n\n\nindividual\n\n\nindividual1 = np.pad(np.diff(individual, axis = 1), ((0, 0), (0, 1)), mode='constant')\n\n\nimport numpy as np\n\n\narr = [[1,2,3,4],[4,6,8,9],[5,10,15,20]]\n\n\nnp.diff(arr, append=arr[-1], axis = 1)\n\n\npadded_arr = np.pad(arr, ((0, 0), (0, 1)), mode='constant')\n\n\npadded_arr"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Table Of Contents\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPost With Jupyter Notebook\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJul 8, 2023\n\n\nVertikal Willis\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJul 5, 2023\n\n\nVertikal Willis\n\n\n\n\n\n\nNo matching items"
  }
]